<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Henry 기술블로그</title>
  
  
  <link href="/guriOH.github.io/atom.xml" rel="self"/>
  
  <link href="https://gurioh.github.io/guriOH.github.io/"/>
  <updated>2020-01-09T14:26:11.420Z</updated>
  <id>https://gurioh.github.io/guriOH.github.io/</id>
  
  <author>
    <name>Henry Oh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AWS/EC2/chaper10</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper10/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper10/</id>
    <published>2020-01-09T14:07:04.224Z</published>
    <updated>2020-01-09T14:26:11.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cloudwatch-101">CloudWatch 101</h1><p>Tips</p><ul><li>Standard Monitoring = 5 min</li><li>Detailed Monitoring = 1 min</li></ul><p>What can i do with CloudWatch</p><ol><li><p>Dashboard - Creates awesome dashboards to see what is happening with your AWS env</p></li><li><p>Alarms - Allows you to set Alarms that norify you when particular threshold are hit.</p></li><li><p>Events - CloudWatch Events helps you to respond to state changes in your AWS resources.</p></li><li><p>Logs - CloudWatch Logs helps you to aggregate, monitor, and store logs.</p></li></ol><ul><li>CloudWatch monitors performance</li><li>CloudTrail monitors API calls in AWS platform.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;cloudwatch-101&quot;&gt;CloudWatch 101&lt;/h1&gt;
&lt;p&gt;Tips&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standard Monitoring = 5 min&lt;/li&gt;
&lt;li&gt;Detailed Monitoring = 1 min&lt;/li&gt;
&lt;/ul&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/EC2/chaper09</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper09/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper09/</id>
    <published>2020-01-09T13:58:38.542Z</published>
    <updated>2020-01-09T14:07:02.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cloudwatch-101">CloudWatch 101</h1><p>What is Cloud watch</p><ul><li>monitoring service</li></ul><p>cloudWatch monitors performance</p><ul><li>Compute<ul><li>EC2</li><li>Autoscaling Groups</li><li>Elastic Load Balancers</li><li>Route53 Health Checks</li></ul></li><li>Storage &amp; Content Delivery<ul><li>EBS Volumes</li><li>Storage Gateways</li><li>CloudFront</li></ul></li></ul><p>Host Level Metrics Consist of</p><ul><li>CPU</li><li>Network</li><li>Disk</li><li>Status Check</li></ul><p>Cloud Trail compare with CloudWatch</p><p>Cloud Trail like CCTV</p><ul><li>CloudWatch monitors performance.</li><li>CloudTrail monitors API calls in the AWS platform.</li></ul><p>Remember;</p><ul><li>CW is used for monitoring performance</li><li>CW can monitor most of AWS as well as your applications that run on AWS.</li><li>CW with ec2 will monitor events every 5 minutes by default.</li><li>You can have 1 minute intervals by turning on detailed monitoring.</li><li>You can create CW alarms whi<br>ch trigger norification.</li><li>CW is all about performance. CloudTrail is all about auditing.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;cloudwatch-101&quot;&gt;CloudWatch 101&lt;/h1&gt;
&lt;p&gt;What is Cloud watch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;monitoring service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cloudWatch monitors perform
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/EC2/chaper08</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper08/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper08/</id>
    <published>2020-01-09T13:46:19.471Z</published>
    <updated>2020-01-09T13:58:37.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="encryped-root-device-volumes-snapshots">Encryped Root Device Volumes &amp; Snapshots</h1><ul><li>Snapshots of encrypted volumes are encrypted automatically</li><li>Volumes restored from encrypted snapshots are encrypted automatically</li><li>You can share snapshots, but only if they are unencrypted.</li><li>These snapshots can be shared with other AWS accounts or made public</li></ul><p>Process</p><ol><li>Create a Snapshot of the unencrypted root device volume</li><li>Create a copy of the Snapshot and select encrypt option</li><li>Create an AMI from the encrypted Snapshot</li><li>Use that AMI to launch new encryted instances</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;encryped-root-device-volumes-snapshots&quot;&gt;Encryped Root Device Volumes &amp;amp; Snapshots&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Snapshots of encrypted volumes ar
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/EC2/chaper07</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper07/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper07/</id>
    <published>2020-01-09T08:48:10.690Z</published>
    <updated>2020-01-09T13:46:03.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ami-types-ebs-vs-instance-store">AMI types (EBS vs Instance store)</h1><ul><li>Select AMI based on:</li></ul><ol><li>Region</li><li>Operating system.</li><li>Architecture (32-bit or 64-bit)</li><li>Launch Permissions</li><li>Storage for Root device</li></ol><h2 id="all-amis-are-categorized-as-either-backed-by-ebs-or-instance-store">All AMIs are categorized as either backed by EBS or Instance store</h2><ul><li><p>For EBD Volume : The root device for an instance launched from the AMI is an Amazon EBS volume created from an Amazon EBS snapshot</p></li><li><p>For Instance Store Volumes : The root device for an instance launched from the AMI is an instance store volume created from a template stored in Amazon S3.</p></li></ul><p>tips</p><ul><li>Instance Store Volume are somethimes called Ephemeral Storage</li><li>Instance store volume cannot be stopped If the underlying host fails, you will lose your data.</li><li>EBS backed instances can be stopped. You will not lose the data on this instance if it is stopped.</li><li>You can reboot both, you will not lose your data.</li><li>By default, both ROOT volumes will be deleted on termination. However, with EBS volumes, you can tell aws to keep the root device volume</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ami-types-ebs-vs-instance-store&quot;&gt;AMI types (EBS vs Instance store)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Select AMI based on:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Region&lt;/li
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/EC2/chaper06</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper06/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper06/</id>
    <published>2020-01-09T08:12:37.991Z</published>
    <updated>2020-01-09T08:47:53.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ebs1-volumne">EBS1 Volumne</h1><p>EBS 스토리지는 ec2 인스턴스와 같은 가용공간에 있어야함.</p><p>추가적인 볼륨들은 Ec2인스턴스 삭제를 해도 지워지지 않는다.</p><p>Tips</p><ul><li><p>EBS : virtual hard disk</p></li><li><p>Snapshots exist on S3. Think of snapshots as a photograph of the disk</p></li><li><p>Snapshots are point in time copies of Volumes.</p></li><li><p>Snapshots are incremental - this means that only the blocks that have changed since your last snapshot are moved to S3.</p></li><li><p>To create a snapshot for Amazone EBS volumes that serve as root devices, you should stop the instance before taking the snapshot.</p></li><li><p>however you can snap while instance running.</p></li><li><p>You can create AMI’s from both Volumes and Snapshots</p></li><li><p>You can change EBS volume size on the fly, including changing the size the type.</p></li><li><p>Volume will ALWAYS be in the same availability zone as the EC2 instance.</p></li><li><p>To move an EC2 volume from one AZ to another, take a snapshot of it, create an AMI from the snapshot and then use the AMI to launch the EC2 instance in a new AZ.</p></li><li><p>To move an EC2 volume from one region to another.<br>EC2 -&gt; snapshot -&gt; AMI -&gt; copy AMI to another zone.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ebs1-volumne&quot;&gt;EBS1 Volumne&lt;/h1&gt;
&lt;p&gt;EBS 스토리지는 ec2 인스턴스와 같은 가용공간에 있어야함.&lt;/p&gt;
&lt;p&gt;추가적인 볼륨들은 Ec2인스턴스 삭제를 해도 지워지지 않는다.&lt;/p&gt;
&lt;p&gt;Tips&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/EC2/chaper05</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper05/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper05/</id>
    <published>2020-01-09T08:03:47.634Z</published>
    <updated>2020-01-09T08:12:14.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ebs101">EBS101</h1><p>What is EBS</p><p>Elastic Block Store</p><p>5 diff type of EBS storage;</p><ol><li>General Purpose (SSD)</li><li>Provisioned IOPS (SSD)</li><li>Throughput Optimized HDD</li><li>Cold HDD</li><li>EBS Magnetic</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ebs101&quot;&gt;EBS101&lt;/h1&gt;
&lt;p&gt;What is EBS&lt;/p&gt;
&lt;p&gt;Elastic Block Store&lt;/p&gt;
&lt;p&gt;5 diff type of EBS storage;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;General Purpose (SSD)&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/EC2/chaper04</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper04/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper04/</id>
    <published>2020-01-09T07:55:43.013Z</published>
    <updated>2020-01-09T08:03:38.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="security-group">Security Group</h1><p>Tips</p><ul><li><p>All inbound traffic is blocked by default</p></li><li><p>All Outbountd traffic is allowed.</p></li><li><p>Change to Security groups take effect immediatly.</p></li><li><p>You can have any number of EC2 instances within a security group</p></li><li><p>You can have multiple security groups attached to Ec2 instances.</p></li><li><p>Security Groups are STATEFUL.</p></li><li><p>If you create an inbound rule allowing traffic in, that traffic is automatically allowed back out again</p></li><li><p>You cannot block specific IP address using security groups, instead use Network Access Control Lists.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;security-group&quot;&gt;Security Group&lt;/h1&gt;
&lt;p&gt;Tips&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All inbound traffic is blocked by default&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All Outboun
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/EC2/chaper03</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper03/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper03/</id>
    <published>2020-01-09T06:23:06.423Z</published>
    <updated>2020-01-09T07:33:07.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lanuch-ec2-instance-lab2">Lanuch EC2 Instance lab2</h1><p>Tips</p><ul><li>Terminate Protection Turned off by default</li><li>On an EBS-backed instance, the default action is for the root EBS volume to be deleted when the instance is terminated.</li><li>EBS Root Volumes of your DEFAULT AMI’s can be encrypted</li><li>Additional volumnes can be encypted.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lanuch-ec2-instance-lab2&quot;&gt;Lanuch EC2 Instance lab2&lt;/h1&gt;
&lt;p&gt;Tips&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Terminate Protection Turned off by default&lt;/li&gt;
&lt;li&gt;On 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/EC2/chaper02</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper02/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper02/</id>
    <published>2020-01-09T05:42:36.679Z</published>
    <updated>2020-01-09T05:44:41.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lanuch-ec2-instance-lab1">Lanuch EC2 Instance lab1</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lanuch-ec2-instance-lab1&quot;&gt;Lanuch EC2 Instance lab1&lt;/h1&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/EC2/chaper01</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper01/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/EC2/chaper01/</id>
    <published>2020-01-08T07:48:57.441Z</published>
    <updated>2020-01-09T07:32:33.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ec2-101-elastic-compute-cloud">EC2 101 Elastic compute cloud</h1><p>What is EC2</p><p>EC2 is a web service that provide resizable compute capacity in the cloud.</p><p>장점 : EC2는 서버 인스턴스 구성시 간편하고, 스케일 업/다운 방식에 상관없이 빠르게 변경 가능하다.</p><p>Pricing Models</p><ol><li>On Demand</li><li>Reserved<ul><li>Standard Reserved instances</li><li>Convertible Reserved Instances</li><li>Scheduled Reserved Instances</li></ul></li><li>spot<ul><li>etc</li></ul></li><li>Dedicated Hosts<ul><li>etc</li></ul></li></ol><p>EC2 Instance Types</p><ul><li>F1, I3, G3, H1, T3…</li><li>tips [Fight <a href="http://DR.MC" target="_blank" rel="noopener">DR.MC</a> PXZ AU]</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ec2-101-elastic-compute-cloud&quot;&gt;EC2 101 Elastic compute cloud&lt;/h1&gt;
&lt;p&gt;What is EC2&lt;/p&gt;
&lt;p&gt;EC2 is a web service that provide resizable 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Tips/Markdown_env</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Tips/Markdown_env/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Tips/Markdown_env/</id>
    <published>2020-01-08T04:19:19.181Z</published>
    <updated>2020-01-08T06:10:42.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="마크다운-작성-환경-만들기">마크다운 작성 환경 만들기</h1><ul><li>사용플러그인</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;마크다운-작성-환경-만들기&quot;&gt;마크다운 작성 환경 만들기&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;사용플러그인&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/IAM/chapter01</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/IAM/chapter01/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/IAM/chapter01/</id>
    <published>2020-01-08T00:29:16.539Z</published>
    <updated>2020-01-08T07:48:39.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iam-정리">IAM 정리</h1><ul><li>IAM</li></ul><ul><li>Users</li><li>Groups</li><li>Policies</li><li>Roles</li></ul><ul><li><p>Root account is simply the account created when first setup your aws account it has complete admin access</p></li><li><p>Always setup MFA on your root account.</p></li><li><p>password customise.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iam-정리&quot;&gt;IAM 정리&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;IAM&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;li&gt;Groups&lt;/li&gt;
&lt;li&gt;Policies&lt;/li&gt;
&lt;li&gt;Roles&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mybatis/mybatis-문자열 해결</title>
    <link href="https://gurioh.github.io/guriOH.github.io/mybatis/mybatis-%EB%AC%B8%EC%9E%90%EC%97%B4%20%ED%95%B4%EA%B2%B0/"/>
    <id>https://gurioh.github.io/guriOH.github.io/mybatis/mybatis-문자열 해결/</id>
    <published>2020-01-07T06:35:55.073Z</published>
    <updated>2020-01-07T06:48:59.935Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis 사용시 쿼리문에 문자열 비교연사자나 부등호를 사용할 때 가 있다.</p><p>select * from user where salary &gt; 100;</p><p>일때 '&gt;'와 같은 기호가 괄호인지 비교연산자인지 모르는데,</p><p>이럴때 ‘&lt;![CDATA[’ 을 사용하면 CDATA 안에 들어가는 문장을 문자열로 인식하게 된다.</p><![CDATA[select * from user where salary > 100]]> 이렇게 사용하면 특수문자가 들어가도 문자열로 인식한다.]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mybatis 사용시 쿼리문에 문자열 비교연사자나 부등호를 사용할 때 가 있다.&lt;/p&gt;
&lt;p&gt;select * from user where salary &amp;gt; 100;&lt;/p&gt;
&lt;p&gt;일때 &#39;&amp;gt;&#39;와 같은 기호가 괄호인지 비교연산자인지 모르는데,
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Spring/java-reflection</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Java/Spring/java-reflection/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Java/Spring/java-reflection/</id>
    <published>2019-12-30T06:34:33.221Z</published>
    <updated>2019-12-30T06:34:37.022Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Spring/Spring-AOP</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Java/Spring/Spring-AOP/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Java/Spring/Spring-AOP/</id>
    <published>2019-12-30T05:46:59.739Z</published>
    <updated>2019-12-30T06:38:32.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="스프링-aop를-구현하는-방법-기술">스프링 AOP를 구현하는 방법 기술.</h1><p>AOP 개념</p><p>Aspect : 공통 기능을 말합니다.</p><p>Advice : Aspect의 기능 자체를 말합니다.</p><p>Jointpoint : Advice를 적용해야 하는 부분입니다. 필드나 메소드이고, 스프링에서는 메소드만</p><p>해당됩니다.</p><p>Pointcut : Jointpoint의 부분,  실제로 Advice가 적용된 부분</p><p>Weaving : Advice를 핵심 기능에 적용하는 행위를 말합니다.</p><ul><li><p>RTW (Runtime Weaving)<br>스프링 AOP에서 사용하는 위빙 방식. Proxy를 생성하여 실제 타깃 오브젝트의 변형없이 위빙을 수행.<br>실제 런타임 시, 메소드 호출과 동시에 위빙이 이루어 지는 방식이다.</p><p>장점 : 소스파일, 클래스파일의 변형이 없다.<br>단점 : 포인트 컷에 대한 어드바이스 적용 갯수가 늘어 날수록 성능이 떨어진다.</p></li><li><p>CTW (Compile time Weaving)<br>AspectJ에는 AJC (AspectJ Compiler)라는 컴파일러가 있는데 Java Compiler를 확장한 형태의 컴파일러이다. AJC를 통해 java파일을 컴파일 하며, 컴파일 과정에서 바이트 코드 조작을 통해 Advisor 코드를 직접 삽입하여 위빙을 수행</p><p>장점 : 위빙중 가장 빠른 퍼포먼스 (JVM상에 올라 갈때 메소드 내에 이미 advice 코드가 삽입 되어있기 때문에…)<br>단점 : 컴파일 과정에서 lombok과 같이 컴파일 과정에서 코드를 조작하는 플러그인과 충돌이 발생할 가능성이 아주 높다. (거의 같이 사용 불가)</p></li><li><p>LTW (Load time Weaving)<br>ClassLoader를 통해 JVM에 로드 될 때 바이트 코드 조작을 통해 위빙이 되는 방식<br>RTW와 마찬가지로 소스코드와 클래스파일에 조작이 없다.<br>하지만 오브젝트가 메모리에 올라가는 과정에서 위빙이 일어나기 때문에 런타임 시, 시간은 CTW보다 상대적으로 느리다</p><p>장점 : 소스파일, 클래스파일의 변형이 없다.<br>단점 : performance가 저하, 설정의 복잡.</p></li></ul><p>스프링 프레임워크에서 지원하는 3가지 AOP 기술</p><ul><li>JDK dynamic proxy, CGLIB, AspectJ</li></ul><p>AOP 적용 방식에 따른 분류</p><ul><li>프록시 기반 : JDK dynamic proxy, CGLIB</li><li>타깃 오브젝트 조작 : AspectJ</li></ul><p><strong>JDK Dynamic Proxy &amp; CGLIB</strong></p><p>Aspect 프레임워크와는 달리 스프링에서는 간단한 설정만으로 JDK Dynamic Proxy와 CGLIB 방식을 사용할 수 있도록 되어 있습니다. 두 방식의 차이는 인터페이스의 유무로서, AOP의 타깃이 되는 클래스가 인터페이스를 구현했다면 JDK Dynamic Proxy를 사용하고, 구현하지 않았다면 CGLIB 방식을 사용합니다</p><p><strong>[출처]</strong> [Spring AOP에 관하여 - <a href="http://blog.naver.com/tmondev/220558804255" target="_blank" rel="noopener">2] JDK Dynamic Proxy &amp; CGLIB</a></p><p>Aspect란?</p><p>도메인 로직에 필요한 다양한 부가기능을 추상화 시킨것.</p><p>어노테이션 기반으로 AOP를 구현은 런타임이 아닌 <code>Compile</code> 시점에 Aspect를 적용하는 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(TestAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span>(<span class="string">"execution(* com.example.aop_example.service.*.test(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBeforeHandler</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"=============== onBeforeThing"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@After</span>(<span class="string">"execution(* com.example.aop_example.service.*.test(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterHandler</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"=============== onAfterHandler"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@AfterReturning</span>(pointcut = <span class="string">"execution(* com.example.aop_example.service.*.test(..))"</span>,</span><br><span class="line">      returning = <span class="string">"str"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterReturningHandler</span><span class="params">(JoinPoint joinPoint, Object str)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"@AfterReturning : "</span> + str);</span><br><span class="line">    logger.info(<span class="string">"=============== onAfterReturningHandler"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.example.aop_example.service.*.test(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPointcut</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"=============== onPointcut"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;스프링-aop를-구현하는-방법-기술&quot;&gt;스프링 AOP를 구현하는 방법 기술.&lt;/h1&gt;
&lt;p&gt;AOP 개념&lt;/p&gt;
&lt;p&gt;Aspect : 공통 기능을 말합니다.&lt;/p&gt;
&lt;p&gt;Advice : Aspect의 기능 자체를 말합니다.&lt;/p&gt;
&lt;p&gt;Jo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Spring/Spring_basic</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Java/Spring/Spring_basic/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Java/Spring/Spring_basic/</id>
    <published>2019-12-30T04:13:03.963Z</published>
    <updated>2019-12-30T06:00:42.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="anotation">Anotation</h1><h4 id="어노테이셔-소스코드에-메타데이터를-표현하는것">어노테이셔 : 소스코드에 메타데이터를 표현하는것</h4><h2 id="built-in-annotation">Built-in Annotation</h2><p>@Override - 메소드 오버라이드 검증</p><p>@Deprecated - 메소드를 사용하지 않도록 유도.</p><p>@SuppressWarnings - 컴파일 경고를 무시하도록 함.</p><p>@SafeVarargs - 제너릴 같은 가변인자 매개변수를 사용할 때 경고 무시 (자바 7 이상)</p><p>@FunctionalInterface - 람다 함수등을 위한 인터페이스를 지정. 메소드가 두개 이상 되면 컴파일 오류 (자바 8 이상)</p><h2 id="meta-annotations">Meta Annotations</h2><p>@Retention - 어노테이션 영향 범위 결정.</p><p>@Documented - 어노테이션 정보 출력.</p><p>@Target - 어노테이션 적용 위치 결정.</p><p>@Inherited - 자식클래스 어노테이션 상속 여부 결정.</p><p>@Repeatable - 반복적으로 어노테이션을 선언</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;anotation&quot;&gt;Anotation&lt;/h1&gt;
&lt;h4 id=&quot;어노테이셔-소스코드에-메타데이터를-표현하는것&quot;&gt;어노테이셔 : 소스코드에 메타데이터를 표현하는것&lt;/h4&gt;
&lt;h2 id=&quot;built-in-annotation&quot;&gt;Built-in An
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux/Shell/Configuration_env_with_intellij</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Linux/Shell/Configuration_env_with_intellij/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Linux/Shell/Configuration_env_with_intellij/</id>
    <published>2019-12-21T13:05:08.280Z</published>
    <updated>2019-12-22T06:54:21.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="인텔리제이-쉘스크립트-개발환경-구성">인텔리제이 쉘스크립트 개발환경 구성</h1><p>Linux/Mac라면 굳이 쉘스크립트 작성을 위한 개발환경이 필요하지 않아도 되지만,</p><p>제품 빌드 스크립트등을 작성 할 시, 각종 환경변수와 컨피그 파일 로드를 포함하여 복잡한 스크립트를 작성해야 할 수도 있다.</p><p>이 때, 조금이라도 더 편하게 스크립트를 작성 할 수 있을 것 같다…ㅎㅎ</p><h2 id="empty-project-생성">Empty project 생성</h2><p>단지 쉘스크립트를 위한 환경이니 빈프로젝트를 생성.<br><img src="../../image/shell/1.png" alt=""></p><p>개인 취향에 맡게 개발 환경을 만들자. 나는 아래와 같은 폴더구조를 만들었다.</p><p><img src="../../image/shell/2.png" alt=""></p><h2 id="테스트-프로그램-실행">테스트 프로그램 실행.</h2><p>아래의 코드를 실행해보자 .<br><img src="../../image/shell/3.png" alt=""></p><p>인텔리제이에서는 아래에서 보이듯이 여러가지 언어 또는 프레임워크를 지원한다.<br><img src="../../image/shell/4.png" alt=""></p><p>쉘스크립트 실행 환경을 선택하자.</p><p>그리고 실행할 script path를 입력하고</p><p>아래와 같이 인터프리터를 설정하면 실행 준비 끝.</p><p>일단 기본 Bash쉘로 설정하였다.</p><p><img src="../../image/shell/5.png" alt=""></p><p>Mac 기준 Ctrl + R 로  그때그때 실행하며 편하게 개발시작.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;인텔리제이-쉘스크립트-개발환경-구성&quot;&gt;인텔리제이 쉘스크립트 개발환경 구성&lt;/h1&gt;
&lt;p&gt;Linux/Mac라면 굳이 쉘스크립트 작성을 위한 개발환경이 필요하지 않아도 되지만,&lt;/p&gt;
&lt;p&gt;제품 빌드 스크립트등을 작성 할 시, 각종 환경변수
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/Lambda</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/Lambda/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/Lambda/</id>
    <published>2019-12-21T11:07:00.872Z</published>
    <updated>2019-12-21T12:03:42.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lambda">Lambda</h1><p>Lambda is the ultimate abstraction layer</p><p>Lambda scales out ( not up ) automatically</p><h1 id="alexa">Alexa</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lambda&quot;&gt;Lambda&lt;/h1&gt;
&lt;p&gt;Lambda is the ultimate abstraction layer&lt;/p&gt;
&lt;p&gt;Lambda scales out ( not up ) automatically&lt;/p&gt;
&lt;h1 id=&quot;alexa&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/VPC</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/VPC/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/VPC/</id>
    <published>2019-12-21T11:06:29.993Z</published>
    <updated>2019-12-21T12:03:47.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vpc">VPC</h1><p>5~10 question</p><h2 id="what-can-we-do-with-a-vpc">What can we do with a VPC?</h2><ul><li>Launch instance into a subnet of your choosing</li><li>Assign custom IP address ranges in each subnet</li><li>Configure route tables between subnets</li><li>Create internet gateway and attach in to our VPC</li><li>Much better security control over your AWS resources</li><li>Instance security groups</li><li>Subnet network access control lists(ACLS)</li></ul><h2 id="vpc-peering">VPC Peering</h2><ul><li>Allows you to connect on VPC with another via a direct network route using private IP address</li><li>Instance behave as if they other AWS accounts as well as with other</li><li>You can peer VPC’s with other AWS accounts as well as with other VPCs in the same account</li><li>Peering is in a star configuration: ie 1central VPC peers with 4 others</li><li>You can peer between regions.</li></ul><h2 id="nat-gatway">NAT Gatway</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vpc&quot;&gt;VPC&lt;/h1&gt;
&lt;p&gt;5~10 question&lt;/p&gt;
&lt;h2 id=&quot;what-can-we-do-with-a-vpc&quot;&gt;What can we do with a VPC?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Launch instance into 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/Route53</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/Route53/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/Route53/</id>
    <published>2019-12-21T09:52:30.163Z</published>
    <updated>2019-12-21T09:52:30.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dns-101">DNS 101</h1><h2 id="route-53">Route 53</h2><h3 id="register-a-domain-name-lab">Register A Domain Name - LAB</h3><h2 id="routing-policy">Routing policy</h2><p>One recode - mule IP address</p><h2 id="weighted-routing-policy">Weighted Routing Policy</h2><p>health checks</p><h2 id="latency-based-routing">Latency-Based Routing</h2><h2 id="failover-routing-policy">Failover Routing policy</h2><h2 id="geolocation-routing-policy">Geolocation Routing policy</h2><h2 id="geoproximity-routing-traffic-flow-only">Geoproximity Routing(Traffic Flow Only)</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dns-101&quot;&gt;DNS 101&lt;/h1&gt;
&lt;h2 id=&quot;route-53&quot;&gt;Route 53&lt;/h2&gt;
&lt;h3 id=&quot;register-a-domain-name-lab&quot;&gt;Register A Domain Name - LAB&lt;/h3&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
