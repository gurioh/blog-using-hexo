<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Henry 기술블로그</title>
  
  
  <link href="/guriOH.github.io/atom.xml" rel="self"/>
  
  <link href="https://gurioh.github.io/guriOH.github.io/"/>
  <updated>2020-01-15T08:30:02.695Z</updated>
  <id>https://gurioh.github.io/guriOH.github.io/</id>
  
  <author>
    <name>Henry Oh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticTranscoder</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/ElasticTranscoder/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/ElasticTranscoder/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T08:30:02.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elastictranscoder">ElasticTranscoder</h1><ul><li>Media Transcoder in the cloud</li><li>Convert media files from their original source format in to different formats that will play on smartphones, tablets, PCs, stc</li><li>Provides transcoding presets for popular output formats, which means that you don’t need to guess about which settings work best on particular devices</li><li>Pay based on the minutes that you transcode and the resolution at which you transcode.</li></ul><h1 id="how-we-use-elastic-transcoder">How we use Elastic Transcoder</h1><ul><li>S3 bucket -&gt; Lamda -&gt; Elastic Tanscoder -&gt; S3 bucket</li></ul><h1 id="tips">Tips</h1><p>Just remember Elastic Transcoder is a media transcoder in the cloud. It convert media files from their original source format in to different formats that will play on multi device</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;elastictranscoder&quot;&gt;ElasticTranscoder&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Media Transcoder in the cloud&lt;/li&gt;
&lt;li&gt;Convert media files from their original so
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Kinesis 101</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Kinesis101/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Kinesis101/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T08:42:46.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="streaming-data">Streaming data</h1><ul><li>Puchases from online stores</li><li>Stock prices</li><li>Game data</li><li>Social network data</li><li>Geospatial data (uber)</li><li>IOT sensor data</li></ul><h1 id="kinesis">Kinesis</h1><ul><li>Kinesis is a platform on aws to send your streaming data to.<br>Kinesis makes it easy to load and analze streaming data, and also providing the abilirty for you to build your own custom applications for you business needs.</li></ul><h1 id="3-different-types">3 different types</h1><ul><li>Kinesis Streams</li><li>Kinesis Firehose</li><li>Kinesis Analytics</li></ul><h1 id="shard">shard</h1><ul><li>5 transactions per second for reads, up to a maxium total data read rate of 2MB per second and up to 1000 records per second for writes, up to a maximum total data write rate of 1 MB per second (including partition keys)</li></ul><h1 id="tips">Tips</h1><ul><li>Kinesis Streams</li><li>Kinesis Firehose</li><li>Kinesis Analytics</li><li>shard</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;streaming-data&quot;&gt;Streaming data&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Puchases from online stores&lt;/li&gt;
&lt;li&gt;Stock prices&lt;/li&gt;
&lt;li&gt;Game data&lt;/li&gt;
&lt;li&gt;Social ne
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>API Gateway</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/APIGateway/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/APIGateway/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-18T07:36:04.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="api-gateway">API Gateway</h1><ul><li>It is a fully managed service that makes it easy for developers to publish, maintain, monitor, and secure APIs at any scale.</li></ul><h1 id="what-can-api-gateway-do">What can api gateway do?</h1><ul><li>Expose HTTPS endpoints to define RESTful API</li><li>Serverless-ly connect to service like lamda &amp; DynamoDB</li><li>Send each API endpoint to a different target</li><li>Run efficiently with low cost</li><li>Scale effortlessly</li><li>Track and control usage by API key</li><li>Throttle requests to prevent attacks</li><li>Connect to CloudWatch to log all requests for monitorinng</li><li>Maintain multiple versions of your API</li></ul><h1 id="tips">Tips</h1><ul><li>Remeber what api gatway is at a high level</li><li>API gateway has caching capabilities to increase performance</li><li>APi gateway is log cost and scales automatically</li><li>You can throttle API Gateway to prevent attacks</li><li>You can log results to CloudWatch</li><li>If you are using Javascript/AJAX that uses multiple domains with API Gateway, ensure that you have enabled CORS on API Gateway</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;api-gateway&quot;&gt;API Gateway&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;It is a fully managed service that makes it easy for developers to publish, maintain, monitor
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Simple Work Flow Service</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SWF/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SWF/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T08:14:31.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="swf">SWF</h1><p>SWF is a web service that makes it easy to coordinate work across distributed application components.<br>SWF enables applications for a range of use cases, including media processing, web application back-ends, business process workflows, and analytics pipeliens, to be designed as a coordination of tasks.</p><h1 id="swf-vs-sqs">SWF vs SQS</h1><ul><li>SQS has a retention period of up to 14days, with SWF, workflow executions can last up to 1 year.</li><li>Amozon SWF ensures that a task is assigned only once and is never duplicated. With amazon SQS, you need to handle duplicated message and may also need to ensure that a message is processed only once.</li><li>Amozon SWF keeps track of all the tasks and events in an application. With amazon SQS, you need to implement your own application-level tracking, especially if your application uses multiple queues.</li></ul><h1 id="swf-actors">SWF Actors</h1><ul><li>Workflow Starters</li><li>Deciders : control the flow of activity tasks in a workflow execution.</li><li>Acitivity Workers - Carry out the activity tasks.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;swf&quot;&gt;SWF&lt;/h1&gt;
&lt;p&gt;SWF is a web service that makes it easy to coordinate work across distributed application components.&lt;br&gt;
SWF enabl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Simple Notification Service</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SNS/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SNS/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T08:23:52.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sns">SNS</h1><p>SNS is web service that makes easy to set up, operate, and send notification from the cloud.<br>It provides developers with a highly scaleable, flexible, and cost-effective capability to publish message from an application and immediately deliver them to subscribers or other applications.</p><h1 id="sns-benefits">SNS Benefits</h1><ul><li>Instantaneous, push-based delivery (no polling)</li><li>Simple APIs and easy integration with applications</li><li>Flexible message delivery over multiple transport protocols</li><li>Inexpensive, pay-as-you-go model with no up-front costs</li><li>Web-based AWS management Console offers the simplicity of a point-and-click-interface</li></ul><h1 id="sns-vs-sqs">SNS vs SQS</h1><ul><li>Both Messaging Service in AWS</li><li>SNS - Push</li><li>SQS - Polls(Pulls)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sns&quot;&gt;SNS&lt;/h1&gt;
&lt;p&gt;SNS is web service that makes easy to set up, operate, and send notification from the cloud.&lt;br&gt;
It provides develo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SQS</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SQS/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SQS/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T08:01:07.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqs">SQS</h1><p>SQS is web service that gices you access to a message queue that can be used to store message while waiting for a computer to process them.2</p><h1 id="two-type-queue">Two type queue</h1><ul><li>Standard Queues (default)</li><li>Fifo Queues (Complemet Standard queue)</li></ul><p>Tips</p><ul><li><p>SQS is pull baed, not pushed baed.</p></li><li><p>Messages are 256 kb in size.</p></li><li><p>Message can be kept in the queue from 1 minute to 14 days; the default retnetion period is 4 days.</p></li><li><p>Visibility Time out is the amount of time that the message is invisible in the SQS queue after a reader picks up that message. Provided the job is processed before the visibility time out expires, the message wil then be deleted from the queue.</p></li><li><p>SQS guarantees that your message will be processed at least once.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sqs&quot;&gt;SQS&lt;/h1&gt;
&lt;p&gt;SQS is web service that gices you access to a message queue that can be used to store message while waiting for a c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Cognito &amp; Web Identity Federation)</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Cognito/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Cognito/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T13:01:45.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web-identity-federation">Web Identity Federation</h1><ul><li>Web Identity Federation lets you give your users access to AWS resources after they have successfully authenticated with a web-based identify provider like Amazon, Facebook, or Google. Following successful authentication, ther user receives an authentication code from the Web ID provider, which they can trade for temporary AWS security credentials.</li></ul><h1 id="amazon-gognito">Amazon Gognito</h1><ul><li>Amazon Gognito providers Web Identify Federation<ul><li>Sign-up and sign-in to your apps</li><li>Access for guest users</li><li>Acts as an Identify Broker between your application and Web ID providers, so you don’t need to write any additional code.</li><li>Syncronizes user data for multiple devices</li><li>Recommanded for all mobile applications AWS services.</li></ul></li></ul><h1 id="user-pool-identify-pool">User pool &amp; Identify pool</h1><h1 id="tips">Tips</h1><ul><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;web-identity-federation&quot;&gt;Web Identity Federation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Web Identity Federation lets you give your users access to AWS resour
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Application Summary</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Summary/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Summary/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-18T07:54:33.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqs">SQS</h1><ul><li>SQS is a way to decouple hour infrastructure</li><li>SQS is pull based, not pushed based.</li><li>Messages are 256 KB in size.</li><li>Messages can be kept in the queue from 1 minute to 14 days; the default retention period is 4 days.</li><li>Standard SQS and FIFO SQS</li><li>Standard order is not quaranteed and messages can be delivered more than once.</li><li>FIFO order is strictly maintained and messages are delivered only once.</li><li>SQS guarantees that your messages will be processed at least once.</li></ul><h1 id="swf-vs-sqs">SWF vs SQS</h1><ul><li>SQS has retention period of up to 14 days; with SWF, workflow executions can last up to 1 year.</li><li>Amazon SWF presents a task-oriented APi, whereas Amazon SQS offers a message-oriented API.</li><li>Amazon SWF ensures that a task is assigned only once and is never duplicated. With Amazon SQS, you need to handle duplicated messages and may also need to ensure that a message is processed only once.</li><li>Amazon SWF keeps track of all the tasks and events in an application. With Amazon SQS, need to implement your own application-level tracking, especially if your application uses multiple queues.</li></ul><h1 id="swf-actors">SWF actors</h1><ul><li>Workflow starters</li><li>Deciders</li><li>Activity workers</li></ul><h1 id="sns-benefits">SNS Benefits</h1><ul><li>Instantaneous, push-based delivery (no polling)</li><li>Simple APIs and easy integration with applications</li><li>Flexble message delivery over multiple transport protocols</li><li>Inexpensive, pay-as-you-go model with no up-front costs</li><li>Web-based AWS Management Console offers the simplicithy of a point-and-click interface</li></ul><h1 id="sns-vs-sqs">SNS vs SQS</h1><ul><li>Both Messaging service</li><li>SNS - push</li><li>SQS - polls(Pulls)</li></ul><h1 id="elastic-transcoder">Elastic Transcoder</h1><ul><li>Just rememver that elastic transcoder is a media transcoder in the cloud. It converts media files from their original source format in to different formats that will play on smartphones, tablets, PCs etc</li></ul><h1 id="api-gateway">API Gateway</h1><ul><li>Remeber what api gatway is at a high level</li><li>API gateway has caching capabilities to increase performance</li><li>APi gateway is log cost and scales automatically</li><li>You can throttle API Gateway to prevent attacks</li><li>You can log results to CloudWatch</li><li>If you are using Javascript/AJAX that uses multiple domains with API Gateway, ensure that you have enabled CORS on API Gateway</li></ul><h1 id="kinesis">Kinesis</h1><ul><li>Know the difference between kinesis streams and kinesis firehose. you will be geiven scenario quesions and you must choose the most relevant service.</li><li>Understand what kineis Analytic is.</li></ul><h1 id="cognito">Cognito</h1><ul><li>Federation allows users to authenticate with a Web Identity Provider (Google, Facebook, Amazon)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sqs&quot;&gt;SQS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SQS is a way to decouple hour infrastructure&lt;/li&gt;
&lt;li&gt;SQS is pull based, not pushed based.&lt;/li&gt;
&lt;li&gt;Messages 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Route53 summary</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Route53/Summary/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Route53/Summary/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-15T07:41:44.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dns-summary">DNS Summary</h1><ul><li>ELBs do not have pre-defined IPv4 addresses; you resolve to them using a DNS name.</li><li>Understand the difference between an Alias Record and a CNAME</li><li>Given the choice, always choose an Alias Record over a CNAME</li></ul><h1 id="common-dns-types">Common DNS Types</h1><ul><li>SOA Records</li><li>NS Records</li><li>A Records</li><li>CNAMES</li><li>MX Records</li><li>PTR Records</li></ul><h1 id="routing-rolicies-that-available-with-route53">Routing Rolicies that available with Route53</h1><ul><li>Simple Routing</li><li>Weighted Routing</li><li>Latency-based Routing</li><li>Failover Routing</li><li>Geolocation Routing</li><li>Geoproximity Routing (Traffic Flow Only)</li><li>Multivalue Answer Routing</li></ul><h1 id="health-checks">Health Checks</h1><ul><li>You can set health checks on individual record sets.</li><li>If a record set fails a health check it will be removed from Route53 until it passes the health check.</li><li>You can set SNS notifications to alert you if a health check is failed.</li></ul><h1 id="simple-routing-policy">Simple Routing Policy</h1><ul><li>If you choose the simple routing policy you can only have one record with multiple IP address.</li><li>If you specify muliple values in a record, Route 53 returns all values to the user in random order.</li></ul><h1 id="weighted-routing-policy">Weighted Routing Policy</h1><h1 id="latency-routing-policy">Latency Routing Policy</h1><h1 id="failover-routing-policy">Failover Routing Policy</h1><h1 id="geolocation-routing-policy">Geolocation Routing Policy</h1><h1 id="geoproximity-routing-traffic-flow-only">Geoproximity Routing (Traffic Flow Only)</h1><ul><li>To use geoproximity routing, you must use Route 53 traffic flow.</li></ul><h1 id="multivalue-answer-policy">Multivalue Answer Policy</h1><ul><li>Essentially the same as with Simple based routing, except you get Health Checks.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dns-summary&quot;&gt;DNS Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ELBs do not have pre-defined IPv4 addresses; you resolve to them using a DNS name.&lt;/li&gt;
&lt;li&gt;U
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring bean life cycle</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Framework/Spring/Spring_bean_understanding/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Framework/Spring/Spring_bean_understanding/</id>
    <published>2020-01-15T01:32:09.000Z</published>
    <updated>2020-01-15T03:55:01.436Z</updated>
    
    <content type="html"><![CDATA[<p>스프링에서는 빈의 생명주기 관리를 위한 방법을 몇가지를 제공하고 있다.<br>본 문서에서는 스프링 빈의 생명주기를 알아보고 관련 인터페이스 몇가지를 알아보자.</p><h3 id="spring-bean-life-cycle-overview">Spring bean life cycle overview</h3><p><img src="../../../image/2020-01-15-11-08-05.png" alt=""></p><p><img src="../../../image/2020-01-15-10-39-16.png" alt=""></p><ul><li>Part 1 - 빈 생성이후 사용전까지 각 단계, 전 처리 단계, 각 생성자 호출하여 생성.</li><li>Part 2 - 빈 삭제 단계</li></ul><h3 id="aware-interfaces">Aware Interfaces</h3><p>많이 사용되는 인터페이스.</p><ul><li><code>BeanFactoryAware</code> : setBeanFactory() 제공</li><li><code>BeanNameAware</code> : ThesetVeanName() 빈의 이름을 생성하는 인터페이스 제공</li><li><code>ApplicationContextAware</code> : ThesetApplicationContext() 해당 빈의 ApplicationContext 객체 제공.</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exmaple <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="bean-post-processor">Bean Post Processor</h3><p>BeanPostProcessor 인터페이스는 개발자가 원하는 로직 의존성 처리로직 등을 구현 할 수 있는 콜백 메소드를 정의</p><ul><li><code>BeanPostProcessor</code><ul><li>postProcessBeforeInitialization: 빈의 초기화 전 수행<blockquote><p>InitializingBean’s afterPropertiesSet or a custom init-method.<br>- postProcessAfterInitialization: 빈 초기화 후 수행<br>&gt; Spring calls this method after any bean initialization callbacks.</p></blockquote></li></ul></li></ul><h3 id="initializingbean-and-disposablebean-callback-interfaces">InitializingBean and DisposableBean Callback Interfaces</h3><ul><li><code>InitializingBean</code><ul><li>afterPropertiesSet 메소드 선언 , 초기화 로직 작성 가능.</li></ul></li><li><code>DisposableBean</code><ul><li>destroy 메서드 선언, 빈의 삭제와 관련 코드 클린업</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;스프링에서는 빈의 생명주기 관리를 위한 방법을 몇가지를 제공하고 있다.&lt;br&gt;
본 문서에서는 스프링 빈의 생명주기를 알아보고 관련 인터페이스 몇가지를 알아보자.&lt;/p&gt;
&lt;h3 id=&quot;spring-bean-life-cycle-overview&quot;&gt;Sp
      
    
    </summary>
    
    
    
      <category term="spring" scheme="https://gurioh.github.io/guriOH.github.io/tags/spring/"/>
    
      <category term="bean" scheme="https://gurioh.github.io/guriOH.github.io/tags/bean/"/>
    
      <category term="IoC" scheme="https://gurioh.github.io/guriOH.github.io/tags/IoC/"/>
    
  </entry>
  
  <entry>
    <title>Cloud/AWS/Database/chapter5</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Database/chapter5/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Database/chapter5/</id>
    <published>2020-01-14T07:37:33.217Z</published>
    <updated>2020-01-14T09:53:44.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redshift">Redshift</h1><p>OLTP vs OLAP</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redshift&quot;&gt;Redshift&lt;/h1&gt;
&lt;p&gt;OLTP vs OLAP&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Cloud/AWS/Database/chapter04</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Database/chapter04/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Database/chapter04/</id>
    <published>2020-01-14T06:36:22.466Z</published>
    <updated>2020-01-14T06:43:03.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dynamodb">DynamoDB</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dynamodb&quot;&gt;DynamoDB&lt;/h1&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Cloud/AWS/Database/chapter03</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Database/chapter03/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Database/chapter03/</id>
    <published>2020-01-14T06:26:00.781Z</published>
    <updated>2020-01-14T06:33:51.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rds-backups-multi-az-read-replicas">RDS backups, Multi-AZ &amp; Read Replicas</h1><h1 id="multi-az-support">Multi-AZ Support</h1><ul><li>SQL Server</li><li>Oracle</li><li>MySql Server</li><li>PostgreSQL</li><li>MariaDB</li></ul><h1 id="read-replicas">Read Replicas</h1><ul><li>Oracle</li><li>MySql Server</li><li>PostgreSQL</li><li>MariaDB</li><li>Aurora</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rds-backups-multi-az-read-replicas&quot;&gt;RDS backups, Multi-AZ &amp;amp; Read Replicas&lt;/h1&gt;
&lt;h1 id=&quot;multi-az-support&quot;&gt;Multi-AZ Support&lt;/h1&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Cloud/AWS/Database/summary</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Database/summary/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Database/summary/</id>
    <published>2020-01-14T05:42:45.621Z</published>
    <updated>2020-01-15T00:20:54.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="databases-summary">Databases Summary</h1><h1 id="rds-oltp">RDS (OLTP)</h1><ul><li>SQL</li><li>MySQL</li><li>PostgreSQL</li><li>Oracle</li><li>Aurora</li><li>MariaDB</li></ul><h1 id="dynamodb-nosql">DynamoDB (NoSQL)</h1><h1 id="red-shift-olap">Red Shift OLAP</h1><h1 id="elasticache">Elasticache</h1><ul><li><p>Memcached</p></li><li><p>Redis</p></li></ul><h1 id="remember">Remember</h1><ul><li>RDS runs on virtual machines</li><li>You cannot log in to these operating systems however.</li><li>Patching of the RDS Operating System and DB is Amazon’s responsiblilty</li><li>RDS is NOT Serverless</li><li>Aurora Serverless IS Serverless</li></ul><h1 id="two-different-types-of-backups-for-rds">Two different types of Backups for RDS</h1><ul><li>Automated Backups</li><li>Databases Snapshots</li></ul><h1 id="read-replicas">Read Replicas</h1><ul><li>Can be multi-az</li><li>Used to increase performance.</li><li>Must have backups turned on.</li><li>Can be in different regions.</li><li>Can be MySQL, PostgreSQL, MariaDB, Oracle, Aurora</li><li>Can be promoted to master, this will break the Read Replica</li></ul><h1 id="multiaz">MultiAZ</h1><ul><li>Used For DR.</li><li>You can force a failover from one AZ to another by rebooting the RDS instance.</li></ul><h1 id="dynamodb">DynamoDB</h1><ul><li>Storead on SSD storage</li><li>Spread Across 3 geographically distinct data centres</li><li>Eventual Consistent Reads (Default)</li><li>Strongly Consistent Reads</li></ul><h1 id="redshift-backups">Redshift Backups</h1><ul><li>Enabled by default with a 1 day retnetion period.</li><li>Maximun retention period is 35 days.</li><li>Redshift always attempts to maintain at least three copies of your data (the original and replica on the compute nodes and a backup in amazon S3)</li><li>Redshift can also asynchronously replicate your snapshots to S3 in another region for disaster recovery</li></ul><h1 id="aurora">Aurora</h1><ul><li>2 copies of your data is contained in each availablity zone. with minu</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;databases-summary&quot;&gt;Databases Summary&lt;/h1&gt;
&lt;h1 id=&quot;rds-oltp&quot;&gt;RDS (OLTP)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Cloud/AWS/Database/chapter01</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Database/chapter01/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Database/chapter01/</id>
    <published>2020-01-14T04:35:01.816Z</published>
    <updated>2020-01-14T05:41:39.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="databases-101">Databases 101</h1><p>Relational databases on AWS</p><ul><li>SQL Server</li><li>Oracle</li><li>MySql</li><li>PostgreSql</li><li>Aurora</li><li>MariaDB</li></ul><p>Multi-AZ vs Read Replicas</p><ul><li>Multi-AZ - For Disaster Recovery</li><li>Read Replicas - For Performance</li></ul><p>Non Relational databases on AWS</p><ul><li>Collection  = Table</li><li>Document = Row</li><li>Key Value Pairs = Fields</li></ul><p>OLTP vs OLAP</p><p>ElasticCache</p><ul><li>web service that makes it easy to deploy, operate, and scale an in memory cache in the cloud.</li></ul><p>ElasticCache supports two open-source in memory caching engines:</p><ul><li>Memcached</li><li>Redis</li></ul><p>Tips</p><ol><li>RDS (OLTP)<ul><li>SQL</li><li>MySQL</li><li>PostgreSQL</li><li>Oracle</li><li>Aurora</li><li>MariaDB</li></ul></li><li>DynamoDB (NoSQL)</li><li>Red Shift OLAP</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;databases-101&quot;&gt;Databases 101&lt;/h1&gt;
&lt;p&gt;Relational databases on AWS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;MySql&lt;/li&gt;
&lt;li&gt;Pos
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Cloud/AWS/IAM/Summary</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/IAM/Summary/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/IAM/Summary/</id>
    <published>2020-01-13T13:32:27.424Z</published>
    <updated>2020-01-14T04:34:39.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="s3-iam">S3 &amp; IAM</h1><p>Identiti Access Management Consists of the follwing;</p><ul><li>Users</li><li>Groups</li><li>Roles</li><li>Policies</li></ul><p>IAM summary</p><ul><li>IAM is universal. if does not apply to regions at this time.</li><li>The “root account” is simply the account created when first setup your AWS account. It has complete Admin access.</li><li>New Users have NO permissions when first created.</li><li>New Users are assigned Access Key ID &amp; Secret Access Keys when first created.</li><li>These are not the same as a password. You cannot use the Access Key ID &amp; Secret Access Key to Login in to the console. You can use this to access AWS via the APIs and CLI</li><li>You only get to view these once. If you lose them, you have to regenerate them, so save them in a secure location.</li><li>Always setup Multifactor Authentication on your root account.</li><li>You can create and customise your own password rotation policies.</li></ul><p>S3 summary</p><ul><li><p>Rememver that S3 is Object-based; i.e.allows you to upload files.</p></li><li><p>Files can be from 0 Bytes to 5 TB.</p></li><li><p>There is unlimited storage.</p></li><li><p>Files are stored in Buckets.</p></li><li><p>S3 is a universal namespace. That is, names must be unique globally.</p></li><li><p>Not suitable to install an operating system on.</p></li><li><p>By default, all newly created buckets are PRIVATE. You can setup access control to your buckets using;</p><ul><li>Bucket Policies</li><li>Access Control Lists</li></ul></li><li><p>S3 buckets can be configured to create access logs which log all requests made to the S3 bucket. This can be sent to another bucket and even another bucket in another account.</p></li></ul><p>The Key fundamentals of S3</p><ul><li>Key</li><li>Value</li><li>Version ID</li><li>Metadata</li><li>Subresources</li><li>Read after consistency for PUTS of new Objects</li><li>Eventual Consistency for overwrite PUTS and DELETES (can take some time to propagate)</li></ul><p>Exam Tips</p><ul><li>S3 standard</li><li>S3 - IA</li><li>S3 One zone - IA</li><li>S3 - intelligent Tiering</li><li>S3 Glacier</li><li>S3 Glacier Deep Archive</li></ul><p>Encryption In Transit is achieved by</p><ul><li>SSL/TLS<br>Encryption At Rest (Server Side) is achieved by</li><li>S3 managed Keys - SSE-S3</li><li>AWS Key Management Service, Managed Keys - SSE-KMS</li><li>Server Side Encryption With Customer Provided Keys SSE-C<br>Client Side Encryption</li></ul><p>Cross Region Replication</p><ul><li>Versioning must be enabled on both the source and destination buckets.</li><li>Regions must be unique.</li><li>Files in an existing bucket are not replicated automatically</li><li>All subsequent updated files will be replicated automatically.</li><li>Delete markers are not replicated.</li><li>Deleting individual versions or delete markers will not be replicated.</li><li>Understand what Cross Region Replication is at a high level.</li></ul><p>Lifecycle Policies</p><ul><li>Automates moving your objects between the different storage tiers.</li><li>Can be used in conjunction with versioning.</li><li>Can be applied to current versions and previous versions.</li></ul><p>CloudFront</p><ul><li>Edge Location : This is the location where content will be cached. This is separate to an AWS Region/AZ.<ul><li>Edge location are not just READ only – you can write to them too.(ie. put an object on to them)</li><li>Objects are cached for the life of the life of the TTL (Time To Live)</li><li>You can clear cached objects, but you will be charged.</li></ul></li><li>Origin : This is the origin of all the files that the CDN will distribute. This can be either an S3 Bucket, an EC2 instance, an Elastic Load Balancer, or Route53</li><li>Distribution : This is the name given the CDN which consists of a collection of Edge Locations.</li><li>Web Distribution : Typically used for Websites.</li><li>RTMP : Used for Media Streaming.</li></ul><p>Snowball</p><ul><li>Understand what snowball is</li><li>Snowball can</li><li>Import to S3</li><li>Export from S3</li></ul><p>Storage Gateway</p><ol><li>File Gateway</li></ol><ul><li>For flat files, stored directly on S3.</li></ul><ol start="2"><li>Volume Gateway</li></ol><ul><li>Stored Volumes - Entire Dataset is stored on site and is asynchronuly backed up to S3.</li><li>Cached Volumes - Entire Dataset is stored on S3 and the most frequently accesed data is cached on site</li></ul><ol start="3"><li>Gateway Virtual Tape Libary</li></ol><ul><li>Used for backup and uses popular backup applications like NetBackup, Backup Exec, Veem etc.</li></ul><p>Tips</p><ul><li>Read the S3 FAOs before taking the exam, It comes up a LOT !!!</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;s3-iam&quot;&gt;S3 &amp;amp; IAM&lt;/h1&gt;
&lt;p&gt;Identiti Access Management Consists of the follwing;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;li&gt;Groups&lt;/li&gt;
&lt;li&gt;Roles&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Cloud/AWS/IAM/chapter03</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/IAM/chapter03/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/IAM/chapter03/</id>
    <published>2020-01-13T13:04:01.147Z</published>
    <updated>2020-01-13T13:32:26.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="s3">S3</h1><p>What is S3?</p><ul><li>S3 is a safe place to store your files.</li><li>It is Object-based storage.</li><li>The data is spread across multiple devices and facilities.</li></ul><p>Basic of S3</p><ul><li>S3 is Object-based - i.e. allows you to upload files.</li><li>Files can be from 0 Bytes to 5 TB.</li><li>There is unlimited storage.</li><li>Files are stored in Buckets.</li><li>S3 is a universal namespace That is names must be unique globally.<br>ex&gt; httpL//s3-eu-west-1.amazoneaws.com/aaaa</li><li>When you upload a file to S3, you will receive a Http 200 code if the upload was sucessful.</li></ul><p>Object</p><ul><li>Key</li><li>Value</li><li>Version ID</li><li>Metadata</li><li>Subresources;<ul><li>Access Control lists</li></ul></li></ul><p>How does data consistency work for S3?</p><ul><li>Read after Write consistency for PUTs of new Objects</li><li>Eventual Consistency for overwrite PUTS and DELETES (can take some time to propagate)</li></ul><p>In other words;</p><ul><li>If you write a new file and read if immediately afterward, you will be able to view that data.</li><li>If you update AN EXISTING file or delete a file and read it immediately, you may get the older version, or you may not, Basically changes to objects can take a little bit of time to propagate.</li></ul><p>S3 features;</p><ul><li>Tiered Storage Available</li><li>Lifecycle Management</li><li>Versioning</li><li>Encryption</li><li>MFA delete</li><li>Secure your data using Access Control lists and Bucket Policies</li></ul><p>S3 Storage classes</p><ol><li>S3 Standard</li><li>S3 - IA(Infrequently Accessed)</li><li>S3 One Zone - IA</li><li>S3 - Intelligent Tiering</li><li>S3 Glacier</li><li>S3 Glacier Deep Achive</li></ol><p>S3 Transfer Acceleration</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;s3&quot;&gt;S3&lt;/h1&gt;
&lt;p&gt;What is S3?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S3 is a safe place to store your files.&lt;/li&gt;
&lt;li&gt;It is Object-based storage.&lt;/li&gt;
&lt;li&gt;The da
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Cloud/AWS/EC2/Summary</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/EC2/Summary/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/EC2/Summary/</id>
    <published>2020-01-13T05:44:31.875Z</published>
    <updated>2020-01-13T12:54:43.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="summary">Summary</h1><p>Tips</p><h2 id="pricing-model">Pricing model</h2><ol><li>on Demand</li><li>Reserved</li><li>Spot<ul><li>If the Spot instance is terminated by EC2, you will not be charged for a partial hour of usage, However if you terminate the instance yourself, you will be charged for any hour in which the instance ran</li></ul></li><li>Dedicated Hosts</li></ol><h2 id="instance-type">Instance Type</h2><h2 id="ebs">EBS</h2><ul><li>Terminatin Protection is turned off by default, you must turn it omn</li><li>On an EBS-backed instance, the default action is for the root EBS volume to be deleted whe the instance is termicated.</li><li>EBS Root Volumes of your DEFAULT AMI’s can be encrypted. You can also use a third party tool(such as bit locker etc) to encrypt the root volume, or this can be done when creating AMI’s (remember the lab) in the AWS console or using the API.</li><li>Additional volumes can be encrypted.</li></ul><h2 id="security-groups">Security Groups</h2><ul><li>All inbound traffic is blocked by defailt.</li><li>All Outbound traffic is allowed.</li><li>Changes to Security Groups take effect immediately.</li><li>You can have any number of EC2 instances within a security group.</li><li>You can have multiple security groups attached to EC2 instances.</li><li>Security Groups are STATEFUL.</li><li>If you create an inbound rule allowing traffic in, that traffic is automatically allowed back out again.</li><li>You cannot block specific IP address using Security Groups, instead use Network Access Control Lists.</li><li>You can specify allow rules, but not deny rules.</li></ul><h2 id="compare-ebs-types">Compare EBS Types</h2><ol><li>SSD<ul><li>General Purpose SSD</li><li>Provisioned IOPS SSD</li></ul></li><li>HDD<ul><li>Throughput Optimized HDD</li><li>Cold HDD</li><li>EBS Magnetic</li></ul></li></ol><h2 id="ebs-snapshots">EBS snapshots</h2><ul><li>Volumes exist on EBS, Think of EBS as a virtual hard disk.</li><li>Snapshots exist on S3. Think of snapshots as a photograph of the disk.</li><li>Snapshots are point in time copies of Volumes.</li><li>Snapshots are incremental : this mean that only the blocks that have changed since your last snapshot are moved to S3</li><li>If this is your first snapshots, it may take some time to create.</li><li>To create a snapshots for amazon EBS volumes that serve as root devices, you should stop the instance before taking the snapshot.</li><li>However you can take a snap while the instance is running.</li><li>You can create AMI’s from both volumes and snapshots</li><li>You can change EBS volume sizes on the fly, including changing the size and storage type.</li><li>Volumes will ALWAYS be in the same availability zone as EC2 instance</li></ul><h2 id="migrating-ebs">Migrating EBS</h2><ul><li>To move an ev2 volume from one AZ to another, take a snapshot of it, create an AMI from the snapshot and then use AMI to launch the EC2 instance in a new AZ.</li><li>To move an EC2 volume from one region to another, take a snapshot of it, create an AMI from the snapshot and then copy the AMI from one region to the other. Then use the copied AMI to launch the new EC2 instance in the new region.</li></ul><h2 id="ebs-encryption">EBS Encryption</h2><ul><li><p>Snapshots of encrypted volumes are encrypted automatically.</p></li><li><p>Volumes restored from encrypted snapshots are encrypted automatically.</p></li><li><p>You can share snapshots, but only if they are unencrypted.</p></li><li><p>These snapshots can be shared with other AWS accounts or made public.</p></li><li><p>Q1<br>Root Device Volumes can now be encrypted. If you have an unencrypted root device volume that needs to be encrypted do th follwing;</p><ul><li>Create a Snapshot of the unencrypted root device volume</li><li>Create a copy of the snapshot and select the encrypt option</li><li>Create an AMI from the encrypted Snapshot</li><li>Use that AMI to launch new encrypted instances</li></ul></li><li><p>EBS vs Instance Store</p><ul><li>Instance Store Volumes are sometimes called Ephemeral Storage.</li><li>Instance store volumes cannot be stoppted. If the underlying host fails, you will lose your data.</li><li>EBS backed instances can be stopped. You will not lose the data on this instance if it is stopped.</li><li>You can reboot both, you will not lose your data.</li><li>By default, both ROOT volumes will be deleted on termincation. However, with EBS volumes, you can tell AWS to keep the root device volume.</li></ul></li></ul><h2 id="encrypting-root-device-volumes">Encrypting Root Device Volumes</h2><ul><li>Create a Snapshot of the unencrypted root device volume.</li><li>Create a copy of the Snapshot and select the encrypt option.</li><li>Create an AMI from encypted Snapshot</li><li>Use that AMI to launch new encypted instances.</li></ul><h2 id="cloudwatch">CloudWatch</h2><ul><li><p>CloudWatch is used for monitoring performance</p></li><li><p>CloudWatch can monitor most of AWS as well as your applications that run on AWS.</p></li><li><p>CloudWatch with EC2 will monitor events every 5minutes by default.</p></li><li><p>You can have 1 minute intervals by turning on detailed monitoring.</p></li><li><p>You can create CloudWatch alarms which trigger notifications.</p></li><li><p>CloudWatch is all about performance, CloudTrail is all about auditing.</p></li><li><p>What can i do with CloudWatch?</p><ul><li>Dashboards - creates awsome dashboards to see what is happening with your AWS environment.</li><li>Alarms - Allows you to set Alarms that notify you when particular thresholds are hit.</li><li>Events - CloudWatch Events helps you to respond to state changes in your AWS resources.</li><li>Logs - CloudWatch Logs helps you to aggregate, monitor, and store logs.</li></ul></li><li><p>CloudWatch vs CloudTrail</p><ul><li>CloudWatch monitors performance</li><li>CloudTrail monitors API calls in the AWS platform.</li></ul></li></ul><h2 id="cli">CLI</h2><ul><li>You can interact with AWS from anywhere in the world just by using ther command line(CLI)</li><li>You will need to set up access in IAM</li><li>Commands themselves are not in the exam, but some basic commands will be useful to know for real life.</li></ul><h2 id="roles">Roles</h2><ul><li>Roles are more secure than storing your access key and secret access key on individual EC2 instances.</li><li>Roles are easier to manage.</li><li>Roles can be assigned to an EC2 instance after it is created using both the console &amp; command line.</li><li>Roles are universal - you can use then in any region.</li></ul><h2 id="bootstrap-scripts">Bootstrap scripts</h2><ul><li>Bootstrap scrips run when an EC2 isntance first boots.</li><li>Can be powerful way of automating software installs and updates.</li></ul><h2 id="instance-meta-data-user-data">Instance meta data &amp; User data</h2><ul><li>Used to get information about an instance (Such as public IP)</li><li>curl <a href="http://123.123.123.123/latest/meta-data/" target="_blank" rel="noopener">http://123.123.123.123/latest/meta-data/</a></li><li>curl <a href="http://123.123.123.123/latest/user-data/" target="_blank" rel="noopener">http://123.123.123.123/latest/user-data/</a></li></ul><h2 id="efs">EFS</h2><ul><li>Supprots the Network FIle System version 4 (NFSv4) Protocol</li><li>You only pay for the storage you use (no pre-provisioning required)</li><li>Can scale up to the petabytes</li><li>Can support thousands of concurrent NFS connections</li><li>Data is stored across multiple AZ’s within a region</li><li>Read After Write Consistency</li></ul><h2 id="ec2-placement-groups">EC2 Placement Groups</h2><p>Three types placement groups</p><ol><li>Clusterd Placement Group<ul><li>Low Network Latency / High Network Throughput</li></ul></li><li>Spread Placement Group<ul><li>Individual Critical EC2 instances</li></ul></li><li>Partitioned<ul><li>Multiple EC2 instances HDFS, HBase, and Cassandra</li></ul></li></ol><ul><li>Tips<ul><li>A clusted placement group can’t span multiple Availabilty zones.</li><li>A spread placement and partitioned group can.</li><li>The name you specify for a placement group must be unique within your AWS accout</li><li>Only certain types of instances can be launched in a placement group(Compute Optimized, GPU, Memory Optimized, Storage Optimized)</li><li>AWS recommend homogenous instances within clustered placement groups.</li><li>You can’t merge placement groups.</li><li>You can’t move an exising instance into a placement group. You can create an AMI from your exiting instance, and then launch a new intance from the AMI into a placement group</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;Tips&lt;/p&gt;
&lt;h2 id=&quot;pricing-model&quot;&gt;Pricing model&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;on Demand&lt;/li&gt;
&lt;li&gt;Reserved&lt;/li&gt;
&lt;li&gt;Spot
&lt;ul&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Cloud/AWS/EC2/chaper15</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/EC2/chaper15/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/EC2/chaper15/</id>
    <published>2020-01-13T05:32:20.364Z</published>
    <updated>2020-01-13T05:44:29.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ec2-placement-groups">EC2 Placement Groups</h1><p>Three Types of placement Groups;</p><ol><li>Clustered Placement Group<ul><li>Low Network Latency / High Network Throughput</li></ul></li><li>Spread Placement Group<ul><li>Individual Critical EC2 instances</li></ul></li><li>Partitioned<ul><li>Multiple EC2 instances HDFS, HBase, and Cassandra</li></ul></li></ol><p>Tips</p><ul><li>A clustered placement group can’t span multiple Avilability Zones.</li><li>A spread placement and partitioned group can</li><li>The name you specify for a placement group must be unique within your AWS account.</li><li>Only certain types of instances can be launched in a placement group(Compute Optimized, GPU, Memory Optimized, Storage Optimized)</li><li>AWS recomment homogenous instances within clustered placement groups.</li><li>You can’t merge placement groups</li><li>You can’t move a existing instance into a placement group. You can create an AMI from your exisiing instance, and then launch a new instance from the AMI into a placement group.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ec2-placement-groups&quot;&gt;EC2 Placement Groups&lt;/h1&gt;
&lt;p&gt;Three Types of placement Groups;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clustered Placement Group
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Cloud/AWS/EC2/chaper14</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/EC2/chaper14/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/EC2/chaper14/</id>
    <published>2020-01-13T05:05:59.589Z</published>
    <updated>2020-01-13T05:32:17.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="efs-elastic-file-system">EFS (Elastic File System)</h1><p>What is EFS</p><p>File storage service for ec2 instances.</p><p>It is easy to use and provides a simple interface that allows you to create and configure file systems quickly and easily.</p><p>Tips</p><ul><li>Supports the Network File System version 4 (NFSv4) protocol</li><li>You only pay for the storage you use(no pre-provisioning required)</li><li>Can scale up to the petabytes</li><li>Can support thousands of concurrent NFS connections</li><li>Data is stored across multiple AZ’s within a region</li><li>Read After Write Consistency</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;efs-elastic-file-system&quot;&gt;EFS (Elastic File System)&lt;/h1&gt;
&lt;p&gt;What is EFS&lt;/p&gt;
&lt;p&gt;File storage service for ec2 instances.&lt;/p&gt;
&lt;p&gt;It is e
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
