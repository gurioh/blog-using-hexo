<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Henry 기술블로그</title>
  
  
  <link href="/guriOH.github.io/atom.xml" rel="self"/>
  
  <link href="https://gurioh.github.io/guriOH.github.io/"/>
  <updated>2020-01-15T08:30:02.695Z</updated>
  <id>https://gurioh.github.io/guriOH.github.io/</id>
  
  <author>
    <name>Henry Oh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticTranscoder</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/ElasticTranscoder/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/ElasticTranscoder/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T08:30:02.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elastictranscoder">ElasticTranscoder</h1><ul><li>Media Transcoder in the cloud</li><li>Convert media files from their original source format in to different formats that will play on smartphones, tablets, PCs, stc</li><li>Provides transcoding presets for popular output formats, which means that you don’t need to guess about which settings work best on particular devices</li><li>Pay based on the minutes that you transcode and the resolution at which you transcode.</li></ul><h1 id="how-we-use-elastic-transcoder">How we use Elastic Transcoder</h1><ul><li>S3 bucket -&gt; Lamda -&gt; Elastic Tanscoder -&gt; S3 bucket</li></ul><h1 id="tips">Tips</h1><p>Just remember Elastic Transcoder is a media transcoder in the cloud. It convert media files from their original source format in to different formats that will play on multi device</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;elastictranscoder&quot;&gt;ElasticTranscoder&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Media Transcoder in the cloud&lt;/li&gt;
&lt;li&gt;Convert media files from their original so
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>API Gateway</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/APIGateway/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/APIGateway/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-18T07:36:04.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="api-gateway">API Gateway</h1><ul><li>It is a fully managed service that makes it easy for developers to publish, maintain, monitor, and secure APIs at any scale.</li></ul><h1 id="what-can-api-gateway-do">What can api gateway do?</h1><ul><li>Expose HTTPS endpoints to define RESTful API</li><li>Serverless-ly connect to service like lamda &amp; DynamoDB</li><li>Send each API endpoint to a different target</li><li>Run efficiently with low cost</li><li>Scale effortlessly</li><li>Track and control usage by API key</li><li>Throttle requests to prevent attacks</li><li>Connect to CloudWatch to log all requests for monitorinng</li><li>Maintain multiple versions of your API</li></ul><h1 id="tips">Tips</h1><ul><li>Remeber what api gatway is at a high level</li><li>API gateway has caching capabilities to increase performance</li><li>APi gateway is log cost and scales automatically</li><li>You can throttle API Gateway to prevent attacks</li><li>You can log results to CloudWatch</li><li>If you are using Javascript/AJAX that uses multiple domains with API Gateway, ensure that you have enabled CORS on API Gateway</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;api-gateway&quot;&gt;API Gateway&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;It is a fully managed service that makes it easy for developers to publish, maintain, monitor
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Kinesis 101</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Kinesis101/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Kinesis101/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T08:58:59.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="streaming-data">Streaming data</h1><ul><li>Puchases from online stores</li><li>Stock prices</li><li>Game data</li><li>Social network data</li><li>Geospatial data (uber)</li><li>IOT sensor data</li></ul><h1 id="kinesis">Kinesis</h1><ul><li>Kinesis is a platform on aws to send your streaming data to.<br>Kinesis makes it easy to load and analze streaming data, and also providing the abilirty for you to build your own custom applications for you business needs.</li></ul><h1 id="3-different-types">3 different types</h1><ul><li>Kinesis Streams</li><li>Kinesis Firehose</li><li>Kinesis Analytics</li></ul><h1 id="shard">shard</h1><ul><li>5 transactions per second for reads, up to a maxium total data read rate of 2MB per second and up to 1000 records per second for writes, up to a maximum total data write rate of 1 MB per second (including partition keys)</li></ul><h1 id="tips">Tips</h1><ul><li>Kinesis Streams</li><li>Kinesis Firehose</li><li>Kinesis Analytics</li><li>shard</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;streaming-data&quot;&gt;Streaming data&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Puchases from online stores&lt;/li&gt;
&lt;li&gt;Stock prices&lt;/li&gt;
&lt;li&gt;Game data&lt;/li&gt;
&lt;li&gt;Social ne
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Simple Notification Service</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SNS/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SNS/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T08:23:52.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sns">SNS</h1><p>SNS is web service that makes easy to set up, operate, and send notification from the cloud.<br>It provides developers with a highly scaleable, flexible, and cost-effective capability to publish message from an application and immediately deliver them to subscribers or other applications.</p><h1 id="sns-benefits">SNS Benefits</h1><ul><li>Instantaneous, push-based delivery (no polling)</li><li>Simple APIs and easy integration with applications</li><li>Flexible message delivery over multiple transport protocols</li><li>Inexpensive, pay-as-you-go model with no up-front costs</li><li>Web-based AWS management Console offers the simplicity of a point-and-click-interface</li></ul><h1 id="sns-vs-sqs">SNS vs SQS</h1><ul><li>Both Messaging Service in AWS</li><li>SNS - Push</li><li>SQS - Polls(Pulls)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sns&quot;&gt;SNS&lt;/h1&gt;
&lt;p&gt;SNS is web service that makes easy to set up, operate, and send notification from the cloud.&lt;br&gt;
It provides develo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Cognito &amp; Web Identity Federation)</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Cognito/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Cognito/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T13:01:45.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web-identity-federation">Web Identity Federation</h1><ul><li>Web Identity Federation lets you give your users access to AWS resources after they have successfully authenticated with a web-based identify provider like Amazon, Facebook, or Google. Following successful authentication, ther user receives an authentication code from the Web ID provider, which they can trade for temporary AWS security credentials.</li></ul><h1 id="amazon-gognito">Amazon Gognito</h1><ul><li>Amazon Gognito providers Web Identify Federation<ul><li>Sign-up and sign-in to your apps</li><li>Access for guest users</li><li>Acts as an Identify Broker between your application and Web ID providers, so you don’t need to write any additional code.</li><li>Syncronizes user data for multiple devices</li><li>Recommanded for all mobile applications AWS services.</li></ul></li></ul><h1 id="user-pool-identify-pool">User pool &amp; Identify pool</h1><h1 id="tips">Tips</h1><ul><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;web-identity-federation&quot;&gt;Web Identity Federation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Web Identity Federation lets you give your users access to AWS resour
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SQS</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SQS/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SQS/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T08:01:07.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqs">SQS</h1><p>SQS is web service that gices you access to a message queue that can be used to store message while waiting for a computer to process them.2</p><h1 id="two-type-queue">Two type queue</h1><ul><li>Standard Queues (default)</li><li>Fifo Queues (Complemet Standard queue)</li></ul><p>Tips</p><ul><li><p>SQS is pull baed, not pushed baed.</p></li><li><p>Messages are 256 kb in size.</p></li><li><p>Message can be kept in the queue from 1 minute to 14 days; the default retnetion period is 4 days.</p></li><li><p>Visibility Time out is the amount of time that the message is invisible in the SQS queue after a reader picks up that message. Provided the job is processed before the visibility time out expires, the message wil then be deleted from the queue.</p></li><li><p>SQS guarantees that your message will be processed at least once.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sqs&quot;&gt;SQS&lt;/h1&gt;
&lt;p&gt;SQS is web service that gices you access to a message queue that can be used to store message while waiting for a c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Simple Work Flow Service</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SWF/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/SWF/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-15T08:14:31.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="swf">SWF</h1><p>SWF is a web service that makes it easy to coordinate work across distributed application components.<br>SWF enables applications for a range of use cases, including media processing, web application back-ends, business process workflows, and analytics pipeliens, to be designed as a coordination of tasks.</p><h1 id="swf-vs-sqs">SWF vs SQS</h1><ul><li>SQS has a retention period of up to 14days, with SWF, workflow executions can last up to 1 year.</li><li>Amozon SWF ensures that a task is assigned only once and is never duplicated. With amazon SQS, you need to handle duplicated message and may also need to ensure that a message is processed only once.</li><li>Amozon SWF keeps track of all the tasks and events in an application. With amazon SQS, you need to implement your own application-level tracking, especially if your application uses multiple queues.</li></ul><h1 id="swf-actors">SWF Actors</h1><ul><li>Workflow Starters</li><li>Deciders : control the flow of activity tasks in a workflow execution.</li><li>Acitivity Workers - Carry out the activity tasks.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;swf&quot;&gt;SWF&lt;/h1&gt;
&lt;p&gt;SWF is a web service that makes it easy to coordinate work across distributed application components.&lt;br&gt;
SWF enabl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Application Summary</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Summary/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Applications/Summary/</id>
    <published>2020-01-15T07:42:29.000Z</published>
    <updated>2020-01-18T07:58:21.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqs">SQS</h1><ul><li>SQS is a way to decouple hour infrastructure</li><li>SQS is pull based, not pushed based.</li><li>Messages are 256 KB in size.</li><li>Messages can be kept in the queue from 1 minute to 14 days; the default retention period is 4 days.</li><li>Standard SQS and FIFO SQS</li><li>Standard order is not quaranteed and messages can be delivered more than once.</li><li>FIFO order is strictly maintained and messages are delivered only once.</li><li>SQS guarantees that your messages will be processed at least once.</li></ul><h1 id="swf-vs-sqs">SWF vs SQS</h1><ul><li>SQS has retention period of up to 14 days; with SWF, workflow executions can last up to 1 year.</li><li>Amazon SWF presents a task-oriented APi, whereas Amazon SQS offers a message-oriented API.</li><li>Amazon SWF ensures that a task is assigned only once and is never duplicated. With Amazon SQS, you need to handle duplicated messages and may also need to ensure that a message is processed only once.</li><li>Amazon SWF keeps track of all the tasks and events in an application. With Amazon SQS, need to implement your own application-level tracking, especially if your application uses multiple queues.</li></ul><h1 id="swf-actors">SWF actors</h1><ul><li>Workflow starters</li><li>Deciders</li><li>Activity workers</li></ul><h1 id="sns-benefits">SNS Benefits</h1><ul><li>Instantaneous, push-based delivery (no polling)</li><li>Simple APIs and easy integration with applications</li><li>Flexble message delivery over multiple transport protocols</li><li>Inexpensive, pay-as-you-go model with no up-front costs</li><li>Web-based AWS Management Console offers the simplicithy of a point-and-click interface</li></ul><h1 id="sns-vs-sqs">SNS vs SQS</h1><ul><li>Both Messaging service</li><li>SNS - push</li><li>SQS - polls(Pulls)</li></ul><h1 id="elastic-transcoder">Elastic Transcoder</h1><ul><li>Just rememver that elastic transcoder is a media transcoder in the cloud. It converts media files from their original source format in to different formats that will play on smartphones, tablets, PCs etc</li></ul><h1 id="api-gateway">API Gateway</h1><ul><li>Remeber what api gatway is at a high level</li><li>API gateway has caching capabilities to increase performance</li><li>APi gateway is log cost and scales automatically</li><li>You can throttle API Gateway to prevent attacks</li><li>You can log results to CloudWatch</li><li>If you are using Javascript/AJAX that uses multiple domains with API Gateway, ensure that you have enabled CORS on API Gateway</li></ul><h1 id="kinesis">Kinesis</h1><ul><li>Know the difference between kinesis streams and kinesis firehose. you will be geiven scenario quesions and you must choose the most relevant service.</li><li>Understand what kineis Analytic is.</li></ul><h1 id="cognito">Cognito</h1><ul><li>Federation allows users to authenticate with a Web Identity Provider (Google, Facebook, Amazon)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sqs&quot;&gt;SQS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SQS is a way to decouple hour infrastructure&lt;/li&gt;
&lt;li&gt;SQS is pull based, not pushed based.&lt;/li&gt;
&lt;li&gt;Messages 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HA Architecture</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/HA%20Architecture/chapter04/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/HA Architecture/chapter04/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-22T04:27:42.801Z</updated>
    
    <content type="html"><![CDATA[<ul><li>HA Sample question.</li></ul><ul><li><p>You have a website that requires a minumum of 6 instances and it must be highly available. You must also be able to tolerate the failure of 1 Availablity Zone.</p></li><li><p>Always Design for failure</p></li><li><p>Use Multiple AZ’s and Multiple Regions where ever you can.</p></li><li><p>Know the difference between Multi-AZ and Read Replicas for RDS.</p></li><li><p>Know the difference scailing out and scailing up.</p></li><li><p>Read the question carefully and always consider the code element.</p></li><li><p>Know the different S3 storage classes.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;HA Sample question.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You have a website that requires a minumum of 6 instances and it must be highly availab
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Load Balancers Theory</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/HA%20Architecture/chapter01/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/HA Architecture/chapter01/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-20T07:36:42.533Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Elastic Load Balancer</li></ul><ul><li><p>Typs</p><ul><li>Application<ul><li>HTTP and HTTPS</li></ul></li><li>Network<ul><li>TCP traffic</li><li>Use for extreme performance</li></ul></li><li>Classic<ul><li>HTTP/HTTPS/TCP</li></ul></li></ul></li><li><p>504 Error means the gateway has timed out. This means that the application not responding within the idle timeout period.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Elastic Load Balancer&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Typs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application
&lt;ul&gt;
&lt;li&gt;HTTP and HTTPS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network
&lt;u
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Advanced Load Balancers Theory</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/HA%20Architecture/chapter02/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/HA Architecture/chapter02/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-21T04:17:33.919Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Sticky Sessions</li></ul><ul><li>Classic Load Balancer routes each request independently to the registered EC2 instance with the smallest load.<br>Sticky sessions allow you to bind a user’s session to a specific EC2 instance. This ensures that all requests from the user during the session are sent to the same instance.</li><li>You can enable Sticky Sessions for application load balancers as well, but the traffic will be sent at the target group level.</li></ul><ul><li><p>Cross Zone Load Balancing</p></li><li><p>Path Patterns</p></li></ul><ul><li>You can create a listener with rules to forward requests based on the URL path.<br>This is known as path-based routing. IF you are running microservices, you can route traffic to multiple back-end services using path-based routing. For example, you can route general requests to one target group and requests to render images to another target group.</li></ul><ul><li>Tips</li></ul><ul><li>Sticky Sessions enable your users to stick to the same EC2 instance. Can be useful if you are storing information locally to that instance.</li><li>Cross Zone Load Balancing enables you to load balance across multiple availibility zones.</li><li>Path patterns allow you to direct traffic to different EC2 instances based on the URL contained in the request</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Sticky Sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Classic Load Balancer routes each request independently to the registered EC2 instance with the
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Auto Scaling Groups</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/HA%20Architecture/chapter03/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/HA Architecture/chapter03/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-22T01:52:58.077Z</updated>
    
    <content type="html"><![CDATA[<ul><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Route53 summary</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Route53/Summary/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/Route53/Summary/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-15T07:41:44.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dns-summary">DNS Summary</h1><ul><li>ELBs do not have pre-defined IPv4 addresses; you resolve to them using a DNS name.</li><li>Understand the difference between an Alias Record and a CNAME</li><li>Given the choice, always choose an Alias Record over a CNAME</li></ul><h1 id="common-dns-types">Common DNS Types</h1><ul><li>SOA Records</li><li>NS Records</li><li>A Records</li><li>CNAMES</li><li>MX Records</li><li>PTR Records</li></ul><h1 id="routing-rolicies-that-available-with-route53">Routing Rolicies that available with Route53</h1><ul><li>Simple Routing</li><li>Weighted Routing</li><li>Latency-based Routing</li><li>Failover Routing</li><li>Geolocation Routing</li><li>Geoproximity Routing (Traffic Flow Only)</li><li>Multivalue Answer Routing</li></ul><h1 id="health-checks">Health Checks</h1><ul><li>You can set health checks on individual record sets.</li><li>If a record set fails a health check it will be removed from Route53 until it passes the health check.</li><li>You can set SNS notifications to alert you if a health check is failed.</li></ul><h1 id="simple-routing-policy">Simple Routing Policy</h1><ul><li>If you choose the simple routing policy you can only have one record with multiple IP address.</li><li>If you specify muliple values in a record, Route 53 returns all values to the user in random order.</li></ul><h1 id="weighted-routing-policy">Weighted Routing Policy</h1><h1 id="latency-routing-policy">Latency Routing Policy</h1><h1 id="failover-routing-policy">Failover Routing Policy</h1><h1 id="geolocation-routing-policy">Geolocation Routing Policy</h1><h1 id="geoproximity-routing-traffic-flow-only">Geoproximity Routing (Traffic Flow Only)</h1><ul><li>To use geoproximity routing, you must use Route 53 traffic flow.</li></ul><h1 id="multivalue-answer-policy">Multivalue Answer Policy</h1><ul><li>Essentially the same as with Simple based routing, except you get Health Checks.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dns-summary&quot;&gt;DNS Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ELBs do not have pre-defined IPv4 addresses; you resolve to them using a DNS name.&lt;/li&gt;
&lt;li&gt;U
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ACL</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper02/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper02/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-20T04:38:14.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="acl">ACL</h1><ul><li><p>Your VPC automatically comes with a default network ACL, and by default it allows all outbound and inbound traffic.</p></li><li><p>You can create custom network ACLs. By default, each custom network ACL denies all inbound and outbound traffic untill you add rules</p></li><li><p>Each subnet in your VPC must be associated with a network ACL. If you don’t explicitly associate a subnet with a network ACL, the subnet is automatically associated with the default network ACL.</p></li><li><p>Block IP Addresses using network ACLs not Security Groups</p></li><li><p>You can associate a network ACL with multiple subnets; however, a subnet can be associated with only one network ACL at a time. When you associate a network ACL with a subnet, the previous association is removed.</p></li><li><p>Network ACLs contain a numbered list of rules that is evaluated in order, starting with the lowest numbered rule.</p></li><li><p>Network ACLs have separate inbound and outbound rules, and each rule can either allow or deny traffic.</p></li><li><p>Network ACLs are stateless; reponses to allowed inbound traffic are subject to the rules for outbound traffic(and vice versa)</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;acl&quot;&gt;ACL&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Your VPC automatically comes with a default network ACL, and by default it allows all outbound and inboun
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VPC overview</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper01/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper01/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-19T11:48:06.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what-can-we-do-with-a-vpc">What can we do with a VPC</h1><ul><li>Launch instances into a subnet of your choosing</li><li>Assign custom IP address ranges in each subnet</li><li>Configure route tables between subnets</li><li>Create insternet gateway and attach it to our VPC</li><li>Much better security control over your AWS resources</li><li>Instance security groups</li><li>Subnet network access control lists (ACLS)</li></ul><h1 id="default-vpc-vs-custom-vpc">Default VPC vs Custom VPC</h1><ul><li>Default VPC is user friendly, allowing you to immediately deploy instances.</li><li>All Subnets in default VPC have a route out to the internet</li><li>Each EC2 instance has both a public and private IP address.</li></ul><h1 id="vpc-peering">VPC Peering</h1><ul><li>Allows you to connect one VPC with another via a direct network route using private IP Addresses.</li><li>Instances behave as if they were on the same private network</li><li>You can peer VPC’s with other AWS accouhnts as well as with other VPCs in the same account.</li><li>Peering is in a star configuration : ie 1 central VPC peers with 4 others.<br>NO TRANSITIVE PEERING</li></ul><h1 id="nat-instance">NAT instance</h1><ul><li>When creating a NAT instance, Disable Source/Destination Check on the instance.</li><li>NAT instances must be in a public subnet.</li><li>There must be a route out of the private subnet to the NAT instance, in order for this to work.</li><li>The amount of traffic that NAT instances can suppprot depends on the instance size. If you are bottlenecking, increase the instance size.</li><li>You can create high availability using Autoscaling Groups, multiple subnets in different AZs, and a script to automate failover.</li><li>Behind a security Group.</li></ul><h1 id="nat-gatways">NAT Gatways</h1><ul><li>Redundant inside the Availability Zone</li><li>Preferred by the enterprise</li><li>Starts at 5Gbps and scale currently to 45Gbps</li><li>No need to patch</li><li>Not associated with security groups</li><li>Automatically assigned a public ip address</li><li>Remeber to update your route tables.</li><li>No need to disable Source/Destination Checks</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;what-can-we-do-with-a-vpc&quot;&gt;What can we do with a VPC&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Launch instances into a subnet of your choosing&lt;/li&gt;
&lt;li&gt;Assign c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Direct Connect</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper05/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper05/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-20T06:43:03.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="direct-connect">Direct Connect</h1><ul><li>Direct Connect directly connects your data center to AWS</li><li>Useful for high throughput workloads (a lots of network traffic)</li><li>Or if you need a stable reliable secure connection.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;direct-connect&quot;&gt;Direct Connect&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Direct Connect directly connects your data center to AWS&lt;/li&gt;
&lt;li&gt;Useful for high throu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VPC Endpoints</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper06/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper06/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-20T06:53:46.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vpc-endpoints">VPC Endpoints</h1><ul><li><p>A VPC endpoint enables you to privately connect your VPC to supported AWS services and VPC endpoint services powered by PrivateLink without requiring an internet gateway. NAT device, VPN connection, or AWS Direct Connect connection. Instances in your VPC do not require public IP addresses to communicate with reesource in the service. Traffic between your VPC and the other service does not leave the Amazon network.</p></li><li><p>Endpoints are virtual devices.<br>They are horizontally scaled, redundant, and highly available VPC components that allow communication between instances in your VPC and services without imposing availability risks or bandwidth constraints on your network traffic</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vpc-endpoints&quot;&gt;VPC Endpoints&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A VPC endpoint enables you to privately connect your VPC to supported AWS services an
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Bastions</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper04/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper04/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-20T06:34:24.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bastion-host">Bastion host</h1><ul><li><p>A bastion host is a special purpose computer on a network specifically designed and configured to withstand attacks.</p></li><li><p>A NAT Gateway or NAT instance is used to provide internet traffic to EC2 instances in a private subnets.</p></li><li><p>A Bastion is used to securely adminster EC2 instances(Using SSH or RDP). Bastions are called Jump Boxes in Australia.</p></li><li><p>You cannot use a NAT Gateway as a Bastion host.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;bastion-host&quot;&gt;Bastion host&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A bastion host is a special purpose computer on a network specifically designed and con
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VPC Flow logs</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper03/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Cloud/AWS/VPCs/chaper03/</id>
    <published>2020-01-15T03:55:35.000Z</published>
    <updated>2020-01-20T05:16:26.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="custom-vpcs-and-elbs">Custom VPCs and ELBs</h1><h1 id="vpc-flow-logs-levels">VPC Flow logs levels</h1><ul><li>VPC</li><li>Subnet</li><li>Network Interface Level</li></ul><h1 id="not-all-ip-traffic-is-monitored">Not all IP Traffic is monitored.</h1><ul><li>Traffic generated by instances when they contact the Amazon DNS server. If you use your own DNS server, then all traffic to that DNS server is logged.</li><li>Traffic generated by a Windows instance for Amazon Windows license activation.</li><li>DHCP traffic.</li><li>Traffic to the reserved IP address for the default VPC router.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;custom-vpcs-and-elbs&quot;&gt;Custom VPCs and ELBs&lt;/h1&gt;
&lt;h1 id=&quot;vpc-flow-logs-levels&quot;&gt;VPC Flow logs levels&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;VPC&lt;/li&gt;
&lt;li&gt;Subnet
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring bean life cycle</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Framework/Spring/Spring_bean_understanding/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Framework/Spring/Spring_bean_understanding/</id>
    <published>2020-01-15T01:32:09.000Z</published>
    <updated>2020-01-15T03:55:01.436Z</updated>
    
    <content type="html"><![CDATA[<p>스프링에서는 빈의 생명주기 관리를 위한 방법을 몇가지를 제공하고 있다.<br>본 문서에서는 스프링 빈의 생명주기를 알아보고 관련 인터페이스 몇가지를 알아보자.</p><h3 id="spring-bean-life-cycle-overview">Spring bean life cycle overview</h3><p><img src="../../../image/2020-01-15-11-08-05.png" alt=""></p><p><img src="../../../image/2020-01-15-10-39-16.png" alt=""></p><ul><li>Part 1 - 빈 생성이후 사용전까지 각 단계, 전 처리 단계, 각 생성자 호출하여 생성.</li><li>Part 2 - 빈 삭제 단계</li></ul><h3 id="aware-interfaces">Aware Interfaces</h3><p>많이 사용되는 인터페이스.</p><ul><li><code>BeanFactoryAware</code> : setBeanFactory() 제공</li><li><code>BeanNameAware</code> : ThesetVeanName() 빈의 이름을 생성하는 인터페이스 제공</li><li><code>ApplicationContextAware</code> : ThesetApplicationContext() 해당 빈의 ApplicationContext 객체 제공.</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exmaple <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="bean-post-processor">Bean Post Processor</h3><p>BeanPostProcessor 인터페이스는 개발자가 원하는 로직 의존성 처리로직 등을 구현 할 수 있는 콜백 메소드를 정의</p><ul><li><code>BeanPostProcessor</code><ul><li>postProcessBeforeInitialization: 빈의 초기화 전 수행<blockquote><p>InitializingBean’s afterPropertiesSet or a custom init-method.<br>- postProcessAfterInitialization: 빈 초기화 후 수행<br>&gt; Spring calls this method after any bean initialization callbacks.</p></blockquote></li></ul></li></ul><h3 id="initializingbean-and-disposablebean-callback-interfaces">InitializingBean and DisposableBean Callback Interfaces</h3><ul><li><code>InitializingBean</code><ul><li>afterPropertiesSet 메소드 선언 , 초기화 로직 작성 가능.</li></ul></li><li><code>DisposableBean</code><ul><li>destroy 메서드 선언, 빈의 삭제와 관련 코드 클린업</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;스프링에서는 빈의 생명주기 관리를 위한 방법을 몇가지를 제공하고 있다.&lt;br&gt;
본 문서에서는 스프링 빈의 생명주기를 알아보고 관련 인터페이스 몇가지를 알아보자.&lt;/p&gt;
&lt;h3 id=&quot;spring-bean-life-cycle-overview&quot;&gt;Sp
      
    
    </summary>
    
    
    
      <category term="spring" scheme="https://gurioh.github.io/guriOH.github.io/tags/spring/"/>
    
      <category term="bean" scheme="https://gurioh.github.io/guriOH.github.io/tags/bean/"/>
    
      <category term="IoC" scheme="https://gurioh.github.io/guriOH.github.io/tags/IoC/"/>
    
  </entry>
  
</feed>
