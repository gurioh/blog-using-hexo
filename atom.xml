<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Henry 기술블로그</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-02T14:33:12.658Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Henry Oh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring_CRUD_practice</title>
    <link href="http://yoursite.com/2019/11/01/AddressBook/"/>
    <id>http://yoursite.com/2019/11/01/AddressBook/</id>
    <published>2019-11-01T10:37:57.000Z</published>
    <updated>2019-11-02T14:33:12.658Z</updated>
    
    <content type="html"><![CDATA[<p>Autor : 오 훈</p><p>Title : AddressBook</p><h1 id="AddressBook-GitHub-Link"><a href="#AddressBook-GitHub-Link" class="headerlink" title="AddressBook (GitHub Link)"></a>AddressBook (<a href="https://github.com/guriOH/AddressBook.git" target="_blank" rel="noopener">GitHub Link</a>)</h1><h2 id="1-목적"><a href="#1-목적" class="headerlink" title="1. 목적"></a>1. 목적</h2><ul><li>GET, PUT, POST, DELETE 를 이용한  주소록  CRUD 구현</li></ul><h2 id="2-어플리케이션-디자인"><a href="#2-어플리케이션-디자인" class="headerlink" title="2. 어플리케이션 디자인"></a>2. 어플리케이션 디자인</h2><h3 id=""><a href="#" class="headerlink" title=""></a><img src="/image/addressInfo/1.png" alt="스크린샷 2019-08-28 오전 3.51.44"></h3><p>구현에 앞서 기본적인 어플리케이션 디자인을 설명 드리겠습니다.</p><p>어플리케이션은 크게 데이터 클래스 (Request, Response, Model), 비즈니스 로직을 포함한 데이터 처리 클래스로 나뉩니다.</p><h2 id="3-프로젝트-구성"><a href="#3-프로젝트-구성" class="headerlink" title="3. 프로젝트 구성"></a>3. 프로젝트 구성</h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/image/addressInfo/2.png" alt="스크린샷 2019-08-28 오전 4.02.53"></h2><p>프로젝트는  SpringBoot 어플리케이션을 사용하여 작성하였습니다.</p><p>Repository 컨트롤로는 JPA api를 사용하였고,  DataBase로는  인메모리디비 H2를 사용하였습니다.</p><h3 id="3-1-데이터-구성"><a href="#3-1-데이터-구성" class="headerlink" title="3.1 데이터 구성"></a>3.1 데이터 구성</h3><p>AddressInfo.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy= GenerationType.SEQUENCE)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String phonenumber;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AddressInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AddressInfo</span><span class="params">(String name, String phonenumber, String address, String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.phonenumber = phonenumber;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AddressInfo 클래스는 데이터 테이블에 저장될 데이터의 모델로서 Key값은 Integer형태의 Id를 Auto 생성합니다.<br>그리고 주소록에 들어갈 내용으로는 이름, 연락처, 주소, 이메일이 있습니다.</p><p>Getter, Setter 어노테이션을 사용하도록  org.projectlombok.lombok 라이브러리를 사용하였습니다.</p><h2 id="4-상세-설명"><a href="#4-상세-설명" class="headerlink" title="4. 상세 설명"></a>4. 상세 설명</h2><h3 id="4-1-GET"><a href="#4-1-GET" class="headerlink" title="4.1 GET"></a>4.1 GET</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/address"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AddressServiceImpl addressService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">AddressResponse <span class="title">getAddress</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span><span class="keyword">final</span> Integer id) </span>&#123;</span><br><span class="line">List&lt;String&gt; errors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">AddressInfo toDoItem = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">toDoItem = addressService.findById(id);</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">errors.add(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> AddressAdapter.addressInfoResponse(toDoItem, errors, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">List&lt;AddressResponse&gt; <span class="title">getAllMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; errors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;AddressInfo&gt; toDoItems = addressService.findAllMembers(); </span><br><span class="line">List&lt;AddressResponse&gt; toDoItemResponses = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">toDoItems.stream().forEach(toDoItem -&gt; &#123;</span><br><span class="line">toDoItemResponses.add(AddressAdapter.addressInfoResponse(toDoItem, errors, <span class="keyword">null</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> toDoItemResponses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AddressController는 어노테이션을 이용하여 이 클래스가 RESTFul API임을 명시합니다.</p><p>그리고 @RequestMapping을 사용하여 해당 컨트롤러의 최상위 URL을 정의 합니다.</p><p>@RequestMapping(value = “/{id}”, method = RequestMethod.GET)</p><ul><li><p>AddressResponse getAddress(@PathVariable(“id”)final Integer id)</p><ol><li><p>getAddress는 GET 방식 사용하여 호출합니다. @PathVariable으로 정의되어 있는 값을  URL에서 선택하여 getAddress의 인자 ID로 넣어 줍니다.</p></li><li><p>addressService.findById(id)에서는 내부적으로 repository서비스 구현 클래스를 호출하여 해당  ID(key value)를 가진 데이터를 가져옵니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AddressInfo <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> addressRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AddressAdapter.addressInfoResponse(toDoItem, errors, null)<br>가져온 결과값을 Adapter에서 Response객체로 변환하여 반환합니다.</p></li></ol></li><li><p>List<AddressResponse> getAllMember()</p><ol><li><p>getAllMember GET 방식 사용하여 호출합니다.</p></li><li><p>addressService.findAllMembers()에서는 addressRepository.findAll()를 호출하여 모든 주소 데이터를 가져옵니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;AddressInfo&gt; <span class="title">findAllMembers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> addressRepository.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AddressAdapter.addressInfoResponse(toDoItem, errors, null) 가져온 결과값을 Adapter에서 Response객체로 변환하여 반환합니다.</p></li></ol></li></ul><h3 id="4-2-POST"><a href="#4-2-POST" class="headerlink" title="4.2 POST"></a>4.2 POST</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">AddressResponse <span class="title">create</span><span class="params">(@RequestBody <span class="keyword">final</span> AddressRequest addressReqeust)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; errors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">AddressInfo addressInfo = AddressAdapter.addressInfo(addressReqeust);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">addressInfo = addressService.saveMember(addressInfo);</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">errors.add(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> AddressAdapter.addressInfoResponse(addressInfo, errors, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequestBody를 사용하여 HTTP 요청을 AddressRequest로 받고, AddressAdapter에서는 이  Http요청을 AddressInfo객체로 변환한다.</p><ul><li><p>AddressResponse create(@RequestBody final AddressRequest addressReqeust) </p><ol><li><p>addressService.saveMemver(addressInfo)에서는 addressRepository.save(member)를 호출하여 데이터를 저장한다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AddressInfo <span class="title">saveMember</span><span class="params">(AddressInfo member)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> addressRepository.save(member);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>@ResponseBody는 create 메소드 결과 객체를 Http 결과를  Json형태로 돌려준다.</p><h3 id="4-3-PUT"><a href="#4-3-PUT" class="headerlink" title="4.3 PUT"></a>4.3 PUT</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.PUT)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">AddressResponse <span class="title">updateAddress</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id,  @RequestBody <span class="keyword">final</span> AddressRequest addressReqeust) </span>&#123;</span><br><span class="line">List&lt;String&gt; errors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">AddressInfo source = AddressAdapter.addressInfo(addressReqeust);</span><br><span class="line">AddressInfo updated = addressService.updateMember(id, source);</span><br><span class="line"><span class="keyword">return</span> AddressAdapter.addressInfoResponse(updated, errors, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PUT을 사용하여 데이터를 수정합니다. 먼저 @PathVariable(“id”)와 같이 URL에서 변환 대상 객체의 Key(Id)와 수정 내용를 전달 받습니다.</p><ul><li><p>AddressAdapter.addressInfo(addressReqeust) 먼저 수정할 내용의 객체를 AddressAdapter에서 Model 객체로 변환합니다.</p></li><li><p>addressService.updateMember(id, source)는 내부적으로 모든 주소록을 가져와 해당 ID값을 가지는  Model을 수정할  Model로 업데이트 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AddressInfo <span class="title">updateMember</span><span class="params">(Integer id, AddressInfo source)</span> </span>&#123;</span><br><span class="line">AddressInfo target = addressRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span>(target == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">target.setAddress(source.getAddress());</span><br><span class="line">target.setEmail(source.getEmail());</span><br><span class="line">target.setName(source.getName());</span><br><span class="line">target.setPhonenumber(source.getPhonenumber());</span><br><span class="line"></span><br><span class="line">addressRepository.save(target);</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>@ResponseBody는 create 메소드 결과 객체를 Http 결과를  Json형태로 돌려준다.</p><h3 id="4-4-DELETE"><a href="#4-4-DELETE" class="headerlink" title="4.4 DELETE"></a>4.4 DELETE</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">AddressResponse <span class="title">deleteAddress</span><span class="params">(@PathVariable(value=<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">List&lt;String&gt; errors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">String info = <span class="string">"Delete fail"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(addressService.deleteMember(id)) &#123;</span><br><span class="line">info = <span class="string">"Delete success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">errors.add(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> AddressAdapter.addressInfoResponse(<span class="keyword">null</span>, errors, info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE를 사용하여 데이터를 삭제합니다. @PathVariable(“id”)에 명시된 내용을 URL에서 가져옵니다.</p><ul><li><p>addressService.deleteMember(id) 에 삭제할 대상  key값을 주어, 해당 객체를 가져와 delete 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">deleteMember</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">AddressInfo target = addressRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span>( target == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">addressRepository.delete(target);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-테스트"><a href="#5-테스트" class="headerlink" title="5. 테스트"></a>5. 테스트</h2><ol><li>Postman을 활용한 로직 호출 (DB 로그 확인)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Autor : 오 훈&lt;/p&gt;
&lt;p&gt;Title : AddressBook&lt;/p&gt;
&lt;h1 id=&quot;AddressBook-GitHub-Link&quot;&gt;&lt;a href=&quot;#AddressBook-GitHub-Link&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="Study" scheme="http://yoursite.com/categories/Study/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="H2" scheme="http://yoursite.com/tags/H2/"/>
    
      <category term="CRUD" scheme="http://yoursite.com/tags/CRUD/"/>
    
  </entry>
  
  <entry>
    <title>Migration_java_program</title>
    <link href="http://yoursite.com/2019/11/01/Backup-program/"/>
    <id>http://yoursite.com/2019/11/01/Backup-program/</id>
    <published>2019-11-01T10:37:57.000Z</published>
    <updated>2019-11-02T14:33:23.525Z</updated>
    
    <content type="html"><![CDATA[<p>Autor : 오 훈</p><p>Title : Backup-program</p><h1 id="Backup-program-GitHub-Link"><a href="#Backup-program-GitHub-Link" class="headerlink" title="Backup-program (GitHub Link)"></a>Backup-program (<a href="https://github.com/guriOH/backup-program.git" target="_blank" rel="noopener">GitHub Link</a>)</h1><h2 id="1-시스템-구성"><a href="#1-시스템-구성" class="headerlink" title="1. 시스템 구성"></a>1. 시스템 구성</h2><p><img src="/image/backup_program/1.png" alt="스크린샷 2019-08-27 오후 9.23.09"></p><h3 id="1-1-역할"><a href="#1-1-역할" class="headerlink" title="1.1 역할"></a>1.1 역할</h3><h4 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h4><ul><li>0.1초 주기로 Random 하게 생성되는 정수 값을 TimeStamp와 함께 DB에 저장.</li><li>소켓 연결 시 1초 단위로 꺼내서 데이터 전달.</li></ul><h4 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h4><ul><li>소켓 통신을 이용하여 DataSource로부터 데이터를 가져옴.</li><li>설정한 back up DB에 데이터 저장.  </li></ul><h3 id="1-2-개발-방법"><a href="#1-2-개발-방법" class="headerlink" title="1.2 개발 방법"></a>1.2 개발 방법</h3><ul><li>다중 Slave 접속을 위한 멀티 쓰레드 활용</li><li>ScheduledExecutorService를 이용한 Thread trigger</li><li>Slave 세션별 Offset맵핑을 통한 데이터 유실 보안</li></ul><h2 id="2-Master-상세-설명"><a href="#2-Master-상세-설명" class="headerlink" title="2. Master 상세 설명"></a>2. Master 상세 설명</h2><p><img src="/image/backup_program/2.png" alt="스크린샷 2019-08-26 오후 11.21.21"></p><p>Master는 위와 같은 데이터 플로우를 가지고 있습니다.</p><p>코드의 실행은 다음과 같습니다.</p><ol><li><p><strong>Generator 실행</strong></p><p>Master 프로그램은 데이터를 생성하는 중요한 프로그램입니다.<br>따라서 멀티 유저와의 소켓 연결시 예측할수 없는 에러로 부터 최대한 분리하여야 하기때문에 별도의 Thread로 실행합니다.<br>즉, 유저의 연결과 상관없이 Master가 실행이 되면 데이터 생성 및 적재를 시작합니다.</p></li><li><p><strong>SocketService</strong> 실행<br>SocketService는 다중 연결 접속을 지원합니다.<br>먼저 SocketService는 소켓서버를 생성합니다.<br>이후 Client(Slave)가 연결이 되면,  WorkerPool(쓰레드풀)에서  Thread를 생성하여 해당 소켓 연결을 별도의 Thread로 동작 시킵니다.<br>Thread실행 후, 다른 소켓 연결을 대기합니다.<br>​</p></li></ol><h4 id="2-1-코드-설명"><a href="#2-1-코드-설명" class="headerlink" title="2.1 코드 설명 "></a><strong>2.1 코드 설명</strong> <img src="/image/backup_program/3.png" alt="스크린샷 2019-08-28 오전 1.15.52"></h4><h3 id="2-1-1-ServerStarter"><a href="#2-1-1-ServerStarter" class="headerlink" title="2.1.1 ServerStarter"></a>2.1.1 ServerStarter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerStarter</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LogManager.getLogger(ServerStarter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">(AppProperties props)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 데이터 제너레이터 실행</span></span><br><span class="line">Generator generator = <span class="keyword">new</span> Generator(props); </span><br><span class="line">generator.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//소켓 서비스 실행</span></span><br><span class="line">SocketService service = <span class="keyword">new</span> SocketService();</span><br><span class="line">service.initialize(props);</span><br><span class="line">service.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String propFile = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(String l_arg : args) &#123; </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              =/Users/hoon/pjt/project/backup-program/p1/slave/src/main/resources/config/app.properties</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="keyword">if</span>(l_arg.indexOf(<span class="string">""</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">propFile = l_arg.split(<span class="string">"="</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">AppProperties props = <span class="keyword">new</span> AppProperties();</span><br><span class="line">props.initialize();</span><br><span class="line">props.loadConfig(propFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Start(props);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">logger.info(<span class="string">"Put properties location"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">logger.info(<span class="string">"There are no properties info"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>프로그램의 실행을 위해 설정 파일의 Path를 읽어와야 합니다.</p><p>만일 Path가 없거나 args 인자가 없다면 실행하지 않습니다.</p><h3 id="2-1-2-Generator-class"><a href="#2-1-2-Generator-class" class="headerlink" title="2.1.2. Generator.class"></a>2.1.2. Generator.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LogManager.getLogger(Generator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">private</span> AbstractRepositoryManager repositoryManager = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> String target_data_table = <span class="string">"myData"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Generator</span><span class="params">(AppProperties props)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.repositoryManager = <span class="keyword">new</span> PostgresqlRepositoryManager(props); </span><br><span class="line"><span class="keyword">if</span>(props.getPropsMap().get(Constant.DB_TARGET_TABLE_NAME) != <span class="keyword">null</span>)&#123;</span><br><span class="line">    target_data_table = props.getPropsMap().get(Constant.DB_TARGET_TABLE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">    .</span><br><span class="line">.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Generator는 생성자로 부터 설정정보 객체를 전달 받아 DB커넥션 정보를 얻기 위한 RepositoryManager, 데이터 적재를 위한 테이블 네이밍 값을 초기화 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">final</span> Connection con = repositoryManager.getConnection();</span><br><span class="line">logger.info(<span class="string">"DataGenerator DB connection set"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!repositoryManager.isExist(con, target_data_table))&#123;</span><br><span class="line">                <span class="comment">//테이블이 존재하지 않는다면 생성.</span></span><br><span class="line">repositoryManager.createTargetDataTable(con, target_data_table);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">String query = <span class="string">"INSERT INTO "</span>+target_data_table+<span class="string">"(value, created) VALUES(?, ?)"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            Random rf = <span class="keyword">new</span> Random();</span><br><span class="line">PreparedStatement pst = con.prepareStatement(query);</span><br><span class="line">pst.setInt(<span class="number">1</span>,rf.nextInt());</span><br><span class="line">pst.setTimestamp(<span class="number">2</span>, <span class="keyword">new</span> Timestamp(System.currentTimeMillis()));</span><br><span class="line">pst.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">        service.scheduleAtFixedRate(runnable, <span class="number">0</span>, <span class="number">100</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.error(e.getMessage());</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Generator의 수행 로직입니다. </p><ol><li>Connection 생성.</li><li>테이블 생성.</li><li>주기적으로 Insert를 실행시켜 데이터를 생성.</li></ol><p>주기적인 Thread 로직 수행을 위해 ScheduledExecutorService 클래스를 사용하였습니다.<br>자세한 이유는 뒤에서 설명하겠습니다.</p><h3 id="2-1-3-SocketService-class"><a href="#2-1-3-SocketService-class" class="headerlink" title="2.1.3. SocketService.class"></a>2.1.3. SocketService.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LogManager.getLogger(SocketService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">private</span> WorkerPool workerPool;</span><br><span class="line"><span class="keyword">private</span> AbstractRepositoryManager repositoryManager = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> DEFAULT_PORT_NUM = <span class="number">20000</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"><span class="keyword">private</span> String sync_table = <span class="string">"sync_info"</span>;</span><br><span class="line"><span class="keyword">private</span> ServerSocket _serverSocket;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SocketService</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(AppProperties props)</span> </span>&#123;</span><br><span class="line">workerPool = <span class="keyword">new</span> WorkerPool(props);</span><br><span class="line"><span class="keyword">this</span>.repositoryManager = <span class="keyword">new</span> PostgresqlRepositoryManager(props);</span><br><span class="line"><span class="keyword">if</span>(props.getPropsMap().get(<span class="string">"PORT"</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">port = Integer.valueOf(props.getPropsMap().get(<span class="string">"PORT"</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">port = DEFAULT_PORT_NUM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(props.getPropsMap().get(Constant.DB_SYNC_TABLE_NAME) != <span class="keyword">null</span>)&#123;</span><br><span class="line">sync_table = props.getPropsMap().get(Constant.DB_SYNC_TABLE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">repositoryManager.createSyncDataTable(sync_table);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">_serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">Socket l_socket = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">l_socket = _serverSocket.accept();</span><br><span class="line">Sender l_worker = (Sender) workerPool.getWorker();</span><br><span class="line">l_worker.setSocket(l_socket);</span><br><span class="line"></span><br><span class="line">ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">service.scheduleAtFixedRate(l_worker, <span class="number">0</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.error(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SocketService는 slave와의 소켓 통신을 위한 소켓서버 역할을 합니다.</p><p>SocketService 초기화시 Port번호와 Sync_table이 생성됩니다.</p><p>먼저 설정된 Port 가 있다면 해당 Port로 초기화 하고, 이후 Start() 메소드에서 해당 Port 번호로 소켓서버를 생성합니다.</p><p>sync_table은 데이터 유실을 막기위한 Client별 데이터 Offset정보를 가지는 테이블의 이름입니다.</p><p>소켓연결 방법은 아래와 같습니다.</p><ol><li>소켓서버 연결대기 상태</li><li>WorkerPool에서 Thread(Worker)생성</li><li>소켓 연결 </li><li>Thread(Worker) 실행</li><li>다시 1번 부터 반복</li></ol><p>Slave(Client)로 주기적인 데이터 전송을 위해 ScheduledExecutorService를 사용하였습니다.</p><h3 id="2-1-4-WorkerPool-class"><a href="#2-1-4-WorkerPool-class" class="headerlink" title="2.1.4 WorkerPool.class"></a>2.1.4 WorkerPool.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerPool</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LogManager.getLogger(WorkerPool<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">private</span> List&lt;AbstractWorker&gt; senderList = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object lockObject = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> activeThreadCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AppProperties props;</span><br><span class="line"><span class="keyword">private</span> AbstractRepositoryManager repositoryManager = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WorkerPool</span><span class="params">(AppProperties props)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.senderList = <span class="keyword">new</span> ArrayList&lt;AbstractWorker&gt;();</span><br><span class="line"><span class="keyword">this</span>.props = props;</span><br><span class="line"><span class="keyword">this</span>.repositoryManager = <span class="keyword">new</span> PostgresqlRepositoryManager(props);</span><br><span class="line">logger.debug(<span class="string">"WorkerPool is created."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;AbstractWorker&gt; <span class="title">getSenderList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> senderList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSenderList</span><span class="params">(List&lt;AbstractWorker&gt; senderList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.senderList = senderList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getActiveThreadCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> activeThreadCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActiveThreadCount</span><span class="params">(<span class="keyword">int</span> activeThreadCount)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.activeThreadCount = activeThreadCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WorkerPool은 현재 생성된 Thread의 상태 또는 갯수를 관리 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractWorker <span class="title">getWorker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AbstractWorker l_worker = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (lockObject) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">l_worker = (AbstractWorker)Class.forName(<span class="string">"org.opensource.master.socket.Sender"</span>)</span><br><span class="line">.getConstructor(AppProperties<span class="class">.<span class="keyword">class</span>, <span class="title">AbstractRepositoryManager</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">.<span class="title">newInstance</span>(<span class="title">props</span>, <span class="title">repositoryManager</span>)</span>;</span><br><span class="line">l_worker.setId(<span class="string">"Test"</span>);</span><br><span class="line"><span class="keyword">this</span>.senderList.add(l_worker);</span><br><span class="line"><span class="keyword">this</span>.activeThreadCount = <span class="keyword">this</span>.senderList.size();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> l_worker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Master의 소켓서비스는 다중 연결을 지원하기때문에, Thread 생성시 데드락 방지를 위해 synchronized를 사용합니다.</p><p>Thread객체인 Sender를 생성하며, 생성된 Thread를 리스트에 담고, 사용 Thread 갯수를 최신화 합니다.</p><p>위 정보는 소켓 연결이 끊어지거나 Thread에 문제가 있을경우, Thread 컨드롤에 사용하기 위해 추가 하였습니다.</p><p>하지만 현재 기능을 개발은 못하였습니다.</p><h3 id="2-1-4-Sender-class"><a href="#2-1-4-Sender-class" class="headerlink" title="2.1.4 Sender.class"></a>2.1.4 Sender.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> <span class="keyword">extends</span> <span class="title">AbstractWorker</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LogManager.getLogger(Sender<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">private</span> AbstractRepositoryManager repositoryManager = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> LIMIT = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">private</span> Socket _socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String target_data_table = <span class="string">"myData"</span>;</span><br><span class="line"><span class="keyword">private</span> String sync_table = <span class="string">"sync_info"</span>;</span><br><span class="line"></span><br><span class="line">String slaveID = <span class="string">""</span>;</span><br><span class="line">ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">Connection con = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sender</span><span class="params">(AppProperties props, AbstractRepositoryManager repositoryManager)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.repositoryManager = repositoryManager; </span><br><span class="line"><span class="keyword">if</span>(props.getPropsMap().get(Constant.DB_SYNC_TABLE_NAME) != <span class="keyword">null</span>)&#123;</span><br><span class="line">sync_table = props.getPropsMap().get(Constant.DB_SYNC_TABLE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(props.getPropsMap().get(Constant.DB_TARGET_TABLE_NAME) != <span class="keyword">null</span>)&#123;</span><br><span class="line">    target_data_table = props.getPropsMap().get(Constant.DB_TARGET_TABLE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(props.getPropsMap().get(Constant.DB_DATA_LIMIT) != <span class="keyword">null</span>)&#123;</span><br><span class="line">LIMIT = Integer.parseInt(props.getPropsMap().get(Constant.DB_DATA_LIMIT));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sender는 Slave와 연결된 소켓으로 데이터를 전송하는 실질적인 로직이 수행되는 역할을 하고 있습니다.</p><p>target_data_table은 데이터를 적제할 테이블이고, Limit값은 데이터 전송을 위해 DB에서 Select시 한번에 얼마만큼 가져올지를 나타내는 설정입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSocket</span><span class="params">(Socket p_socket)</span> </span>&#123;</span><br><span class="line">_socket = p_socket;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ois = <span class="keyword">new</span> ObjectInputStream(_socket.getInputStream());</span><br><span class="line">            slaveID = (String) ois.readObject();</span><br><span class="line">            logger.info(<span class="string">"Connected client ID : "</span> + slaveID);</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(_socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">            con = repositoryManager.getConnection();</span><br><span class="line">logger.info(<span class="string">"Client connection set"</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">logger.error(e);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setSocket 메소드는 소켓 연결과 stream연결과 DB 커넥션을 연결하는 메소드입니다.</p><p>이때, 소켓이 연결 되면 Slave는 자신의 ID를 서버에 전송합니다.</p><p>해당 ID는 클래스변수로 관리되며 해당 세션에서 Offset과 함께 사용이 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 데이터 전송에 사용할 DataContainer 객체를 생성</span></span><br><span class="line">DataContainer dataContainer = <span class="keyword">new</span> DataContainer();</span><br><span class="line">dataContainer.setSlaveID(slaveID); <span class="comment">// 현재 연결된 Slave의 ID값을 헤더정보로 세팅.</span></span><br><span class="line">    String sql = buildSyncInfoSQL(slaveID); </span><br><span class="line">        <span class="comment">// Sync_table에 현재 Slave에 전송된 데이터 Offset값을 가져쿼리 생성.</span></span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>; <span class="comment">//Default값은 0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Statement st = con.createStatement();</span><br><span class="line">    ResultSet rs = st.executeQuery(sql);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="comment">//만약 Offset 값이 있다면 해당 값으로 Offset값을 변경</span></span><br><span class="line">    offset = rs.getInt(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    sql = buildSelectDataSQL(String.valueOf(offset));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//target_data_table에 Offset 값 만큼 데이터를 가져온다.</span></span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">               <span class="comment">//해당 데이터들을 객체로 변환</span></span><br><span class="line">    dataContainer.add(</span><br><span class="line">    <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">    Arrays.asList(</span><br><span class="line">    String.valueOf(rs.getInt(<span class="number">1</span>)), </span><br><span class="line">    rs.getTimestamp(<span class="number">2</span>).toString()</span><br><span class="line">    )</span><br><span class="line">    )</span><br><span class="line">    );</span><br><span class="line">    count++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 객체 전송</span></span><br><span class="line">    oos.writeObject(dataContainer);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 객체 전송이 완료가 되면, 현재의 Offset값을 최신화 시킨다.</span></span><br><span class="line">     sql = buildUpdateOffsetSQL(slaveID, offset+count);</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">var</span> = st.executeUpdate(sql);</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">setWorkerState(WorkerState.NON_ACTIVE);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ois.close();</span><br><span class="line">oos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sender의 수행 로직입니다. </p><ol><li>데이터 전송에 사용할 DataContainer 객체를 생성</li><li>해당 DataContainer의 헤더 정보로 현재 연결된 Slave의 ID값을 세팅</li><li>Sync_table에 현재 Slave에 전송된 데이터 Offset값을 가져쿼리 생성</li><li>만약 Offset 값이 있다면 해당 값으로 Offset값을 변경</li><li>target_data_table에 Offset 값 만큼 데이터 로드</li><li>DataContainer에 데이터 추가</li><li>데이터 전송</li><li>객체 전송이 완료가 되면, 현재의 Offset값을 최신화<br>​</li></ol><h3 id="2-1-4-Master-Sequence-flow-chart"><a href="#2-1-4-Master-Sequence-flow-chart" class="headerlink" title="2.1.4 Master Sequence flow chart"></a>2.1.4 Master Sequence flow chart<img src="/image/backup_program/4.png" alt="image-20191102224817750"></h3><h2 id="3-Slave-상세-설명"><a href="#3-Slave-상세-설명" class="headerlink" title="3. Slave 상세 설명"></a>3. Slave 상세 설명</h2><h3 id="3-1-코드-설명"><a href="#3-1-코드-설명" class="headerlink" title="3.1 코드 설명"></a>3.1 코드 설명<img src="/image/backup_program/5.png" alt="스크린샷 2019-08-28 오전 2.26.06"></h3><h3 id="3-1-1-ClientStarter-class"><a href="#3-1-1-ClientStarter-class" class="headerlink" title="3.1.1 ClientStarter.class"></a>3.1.1 ClientStarter.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientStarter</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LogManager.getLogger(ClientStarter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">(AppProperties props)</span> </span>&#123;</span><br><span class="line">SocketService service = <span class="keyword">new</span> SocketService();</span><br><span class="line">service.initialize(props);</span><br><span class="line">service.socketClientStart();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String propFile = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(String l_arg : args) &#123;</span><br><span class="line"><span class="keyword">if</span>(l_arg.indexOf(<span class="string">""</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">propFile = l_arg.split(<span class="string">"="</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">AppProperties props = <span class="keyword">new</span> AppProperties();</span><br><span class="line">props.initialize();</span><br><span class="line">props.loadConfig(propFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Start(props);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">logger.info(<span class="string">"Put properties location"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">logger.info(<span class="string">"There are no properties info"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Slave(Client)역시 프로그램의 실행을 위해 설정 파일의 Path를 읽어와야 합니다.</p><p>만일 Path가 없거나 args 인자가 없다면 실행하지 않습니다.</p><h3 id="3-1-2-SocketService-class"><a href="#3-1-2-SocketService-class" class="headerlink" title="3.1.2 SocketService.class"></a>3.1.2 SocketService.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LogManager.getLogger(SocketService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AbstractRepositoryManager repositoryManager = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> AppProperties props;</span><br><span class="line"><span class="keyword">private</span> String back_data_table = <span class="string">"myData"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SocketService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(AppProperties props)</span> </span>&#123;</span><br><span class="line">repositoryManager = <span class="keyword">new</span> PostgresqlRepositoryManager(props);</span><br><span class="line"><span class="keyword">this</span>.props = props;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(props.getPropsMap().get(Constant.DB_BACKUP_TABLE_NAME) != <span class="keyword">null</span>)&#123;</span><br><span class="line">back_data_table = props.getPropsMap().get(Constant.DB_BACKUP_TABLE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">repositoryManager.createTargetDataTable(back_data_table);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">socketClientStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Reciever reciever = <span class="keyword">new</span> Reciever(props, repositoryManager);</span><br><span class="line">reciever.startReciving();</span><br><span class="line">logger.info(<span class="string">"client start"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SocketService 초기화시 벡업 테이블이 생성됩니다.</p><p>먼저 설정된 벡업 테이블 네임이없다면 default네임은 myData입니다.</p><h3 id="3-1-1-Reciever-class"><a href="#3-1-1-Reciever-class" class="headerlink" title="3.1.1 Reciever.class"></a>3.1.1 Reciever.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reciever</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LogManager.getLogger(Reciever<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> PORT = <span class="number">20000</span>;</span><br><span class="line"><span class="keyword">private</span> String IP = <span class="string">"127.0.0.1"</span>;</span><br><span class="line"><span class="keyword">private</span> String ID = <span class="string">"TEST"</span>;</span><br><span class="line"></span><br><span class="line">AbstractRepositoryManager repositoryManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String back_data_table = <span class="string">"myData"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Reciever</span><span class="params">(AppProperties props, AbstractRepositoryManager repositoryManager)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.repositoryManager = repositoryManager;</span><br><span class="line"><span class="keyword">if</span>(props.getPropsMap().get(Constant.MASTERPORT) != <span class="keyword">null</span>)&#123;</span><br><span class="line">PORT = Integer.valueOf(props.getPropsMap().get(Constant.MASTERPORT));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">PORT = <span class="number">20000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(props.getPropsMap().get(Constant.MASTERIP) != <span class="keyword">null</span>)&#123;</span><br><span class="line">IP = props.getPropsMap().get(Constant.MASTERIP);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">IP = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(props.getPropsMap().get(Constant.SLAVEID) != <span class="keyword">null</span>)&#123;</span><br><span class="line">ID = props.getPropsMap().get(Constant.SLAVEID);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ID = <span class="string">"Slave"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(props.getPropsMap().get(Constant.DB_BACKUP_TABLE_NAME) != <span class="keyword">null</span>)&#123;</span><br><span class="line">back_data_table = props.getPropsMap().get(Constant.DB_BACKUP_TABLE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>Reciever는 Slave에서 데이터의 수신과 저장을 하는 역할을 합니다.</p><p>생성자를 통해 접속할 서버의 IP, PORT 정보를 설정값으로 초기화 하고, 현재 Slave의 ID값도 초기화 합니다.</p><p>각 변수의 Default값은 각각 “127.0.0.1”,  “20000”, “Slave” 입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startReciving</span><span class="params">()</span></span>&#123;</span><br><span class="line">Socket socket = <span class="keyword">null</span>;</span><br><span class="line">ObjectOutputStream oos =<span class="keyword">null</span>;</span><br><span class="line">ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">socket = <span class="keyword">new</span> Socket(IP,PORT);</span><br><span class="line"></span><br><span class="line">oos = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">            <span class="comment">// 현재 실행된 Slave의 ID를 전송.</span></span><br><span class="line">oos.writeObject(ID);</span><br><span class="line">logger.info(<span class="string">"Sending request to Socket Server"</span>);</span><br><span class="line">ois = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!socket.isConnected()) <span class="keyword">break</span>; <span class="comment">// 소켓이 끊겼다면 서비스 로직 종료.</span></span><br><span class="line">        DataContainer dataContainer = (DataContainer) ois.readObject();</span><br><span class="line">        <span class="keyword">if</span>(dataContainer.getSlaveID().equals(ID))&#123; <span class="comment">// 현재 연결된 Slave의 ID가 아니라면 데이터를 적재하지 않는다.</span></span><br><span class="line">        logger.info(<span class="string">"Reciever Data Count: "</span> + dataContainer.getRowCount());</span><br><span class="line">            backUpData(dataContainer); <span class="comment">// 수신한 데이터 백업테이블에 적재.</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">logger.error(e.getMessage());</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">ois.close();</span><br><span class="line">oos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>소켓 연결시 현재 Slave의 ID를 Master에 전송합니다.</p><p>이후, DataContainer객체로 데이터를 수신하여 backUpData(dataContainer)에서 데이터를 백업 테이블에 저장합니다.</p><p>하지만 만일 전달 받은  DataContainer가 현재 연결된 Slave의 ID가 아니라면 데이터를 저장하지 않습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backUpData</span><span class="params">(DataContainer dataContainer)</span> </span>&#123;</span><br><span class="line">SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss.SSS"</span>);</span><br><span class="line">Connection con = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">con = repositoryManager.getConnection();</span><br><span class="line"></span><br><span class="line">Statement stmt = con.createStatement();</span><br><span class="line">            con.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">PreparedStatement pstmt = con.prepareStatement(</span><br><span class="line">                    <span class="string">"INSERT INTO "</span>+back_data_table+<span class="string">"(value, created) VALUES(?,?)"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (List&lt;String&gt; row : dataContainer.getRowList()) &#123;</span><br><span class="line">                <span class="comment">// Add each parameter to the row.</span></span><br><span class="line">                pstmt.setInt(<span class="number">1</span>, Integer.parseInt(row.get(<span class="number">0</span>)));</span><br><span class="line">                Date d = format.parse(row.get(<span class="number">1</span>));</span><br><span class="line">                pstmt.setTimestamp(<span class="number">2</span>,  <span class="keyword">new</span> Timestamp(d.getTime()));</span><br><span class="line">                pstmt.addBatch();</span><br><span class="line">            &#125;</span><br><span class="line">     </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pstmt.executeBatch();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Error message: "</span> + e.getMessage());</span><br><span class="line">                <span class="keyword">return</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            con.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">logger.error(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">con.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>backUpData 메소드에서는 다중 PreparedStatement을 생성하여 batch로 데이터 Insert를 수행 합니다.</p><h2 id="5-테스트방법-Case-1"><a href="#5-테스트방법-Case-1" class="headerlink" title="5. 테스트방법 Case 1"></a>5. 테스트방법 Case 1</h2><ul><li>JDK 8</li></ul><ul><li>eclipse 설치 </li><li>Postgresql 9.4 of higher 설치</li></ul><h3 id="Postgresql-설치-주의-사항"><a href="#Postgresql-설치-주의-사항" class="headerlink" title="Postgresql 설치 주의 사항"></a>Postgresql 설치 주의 사항<img src="/image/backup_program/6.png" alt="스크린샷 2019-08-28 오전 6.04.15"></h3><ul><li><h3 id="데이터베이스-변경"><a href="#데이터베이스-변경" class="headerlink" title="데이터베이스 변경"></a><strong>데이터베이스 변경</strong></h3><ul><li><h5 id="DB-URL의-jdbc-postgresql-localhost-5432-DB-Name"><a href="#DB-URL의-jdbc-postgresql-localhost-5432-DB-Name" class="headerlink" title="DB_URL의 jdbc:postgresql://localhost:5432/{DB_Name}"></a>DB_URL의 jdbc:postgresql://localhost:5432/{DB_Name}</h5><p>postgres는 postgres설치시 디폴트 DB 입니다. 다른것을 이용하고자 한다면 DB 생성후 해당 DB이름으로 변경 </p><p>ex&gt; jdbc:postgresql://localhost:5432/opensource</p></li><li><p>소문자로 생성 하는 것을 권장합니다.</p></li></ul></li></ul><ul><li><h3 id="DB-USER-DB-PASSWORD"><a href="#DB-USER-DB-PASSWORD" class="headerlink" title="DB_USER, DB_PASSWORD"></a><strong>DB_USER, DB_PASSWORD</strong></h3><p>DB_USER, DB_PASSWORD 역시 postgres 설치 시 설정한 유저명과 비밀번호 입니다. 새로운 유저로 사용하고자 한다면 해당 DB 접속 후<br>USER, PASSWORD 생성 후 properties에 변경 (소문자로 생성 하는 것을 권장합니다.)</p><p>ex&gt; ![스크린샷 2019-08-28 오전 6.17.07](/image/backup_program/스크린샷 2019-08-28 오전 6.17.07.png)</p></li></ul><h4 id="5-1-1-git-clone-https-github-com-guriOH-backup-program-git"><a href="#5-1-1-git-clone-https-github-com-guriOH-backup-program-git" class="headerlink" title="5.1.1 git clone https://github.com/guriOH/backup-program.git"></a>5.1.1 git clone <a href="https://github.com/guriOH/backup-program.git" target="_blank" rel="noopener">https://github.com/guriOH/backup-program.git</a></h4><h4 id="5-1-2-eclipse-maven-import"><a href="#5-1-2-eclipse-maven-import" class="headerlink" title="5.1.2 eclipse maven import"></a>5.1.2 eclipse maven import</h4><img src="/image/backup_program/7.png" width="300"/><h4 id="5-1-3-Maven-build"><a href="#5-1-3-Maven-build" class="headerlink" title="5.1.3 Maven build"></a>5.1.3 Maven build</h4> <img src="/image/backup_program/8.png" width="300"/><h4 id="5-1-4-Run-Master-amp-Slave"><a href="#5-1-4-Run-Master-amp-Slave" class="headerlink" title="5.1.4 Run Master &amp; Slave "></a>5.1.4 Run Master &amp; Slave <img src="/image/backup_program/9.png" alt="스크린샷 2019-08-28 오전 5.48.45"></h4><p>  Program arguments : ‘={app.properties 파일 위치}’   </p><p>  VM arguments : ‘-Dlog4j.configurationFile=file:////{log4j2.xml 파일 위치}’   </p><h2 id="6-테스트방법-case-2"><a href="#6-테스트방법-case-2" class="headerlink" title="6. 테스트방법 case 2"></a>6. 테스트방법 case 2</h2><h4 id="6-1-5-1-1-3-까지-동일"><a href="#6-1-5-1-1-3-까지-동일" class="headerlink" title="6.1 5.1.1~3 까지 동일"></a>6.1 5.1.1~3 까지 동일</h4><h4 id="6-2-Runnable-JAR-file-각각-export"><a href="#6-2-Runnable-JAR-file-각각-export" class="headerlink" title="6.2 Runnable JAR file 각각 export"></a>6.2 Runnable JAR file 각각 export</h4><img src="/image/backup_program/10.png" width="300"/> <h4 id="6-3-Terminal-command"><a href="#6-3-Terminal-command" class="headerlink" title="6.3 Terminal command"></a>6.3 Terminal command</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -Dlog4j.configurationFile=file:////&#123;log4j2.xml 파일 위치&#125; -jar master.jar &#123;=app.properties 파일 위치&#125;</span><br><span class="line">java -Dlog4j.configurationFile=file:////&#123;log4j2.xml 파일 위치&#125; -jar slave.jar &#123;=app.properties 파일 위치&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Autor : 오 훈&lt;/p&gt;
&lt;p&gt;Title : Backup-program&lt;/p&gt;
&lt;h1 id=&quot;Backup-program-GitHub-Link&quot;&gt;&lt;a href=&quot;#Backup-program-GitHub-Link&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/categories/project/"/>
    
    
      <category term="socket" scheme="http://yoursite.com/tags/socket/"/>
    
      <category term="migration" scheme="http://yoursite.com/tags/migration/"/>
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
  </entry>
  
</feed>
