<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Henry 기술블로그</title>
  
  
  <link href="/guriOH.github.io/atom.xml" rel="self"/>
  
  <link href="https://gurioh.github.io/guriOH.github.io/"/>
  <updated>2019-12-21T13:11:09.330Z</updated>
  <id>https://gurioh.github.io/guriOH.github.io/</id>
  
  <author>
    <name>Henry Oh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell/Configuration_env_with_intellij</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Shell/Configuration_env_with_intellij/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Shell/Configuration_env_with_intellij/</id>
    <published>2019-12-21T13:05:08.280Z</published>
    <updated>2019-12-21T13:11:09.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="인텔리제이-쉘스크립트-개발환경-구성">인텔리제이 쉘스크립트 개발환경 구성</h1><p>Linux/Mac라면 굳이 쉘스크립트 작성을 위한 개발환경이 필요하지 않아도 되지만,</p><p>제품 빌드 스크립트등을 작성 할 시, 각종 환경변수와 컨피그 파일 로드를 포함하여 복잡한 스크립트를 작성해야 할 수도 있다.</p><p>이 때, 조금이라도 더 편하게 스크립트를 작성 할 수 있을 것 같다…ㅎㅎ</p><h2 id="empty-project-생성">Empty project 생성</h2><p>단지 쉘스크립트를 위한 환경이니 빈프로젝트를 생성.<br><img src="../../image/shell/1.png" alt=""></p><p>개인 취향에 맡게 개발 환경을 만들자. 나는 아래와 같은 폴더구조를 만들었다.</p><p><img src="../../image/shell/2.png" alt=""></p><h2 id="테스트-프로그램-실행">테스트 프로그램 실행.</h2><p>아래의 코드를 실행해보자 .<br><img src="../../image/shell/3.png" alt=""></p><p>인텔리제이에서는 아래에서 보이듯이 여러가지 언어 또는 프레임워크를 지원한다.<br><img src="../../image/shell/4.png" alt=""></p><p>쉘스크립트 실행 환경을 선택하자.</p><p>그리고 실행할 script path를 입력하고</p><p>아래와 같이 인터프리터를 설정하면 실행 준비 끝.</p><p>일단 기본 Bash쉘로 설정하였다.</p><p><img src="../../image/shell/5.png" alt=""></p><p>Mac 기준 Ctrl + R 로  그때그때 실행하며 편하게 개발시작.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;인텔리제이-쉘스크립트-개발환경-구성&quot;&gt;인텔리제이 쉘스크립트 개발환경 구성&lt;/h1&gt;
&lt;p&gt;Linux/Mac라면 굳이 쉘스크립트 작성을 위한 개발환경이 필요하지 않아도 되지만,&lt;/p&gt;
&lt;p&gt;제품 빌드 스크립트등을 작성 할 시, 각종 환경변수
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/Lambda</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/Lambda/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/Lambda/</id>
    <published>2019-12-21T11:07:00.872Z</published>
    <updated>2019-12-21T12:03:42.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lambda">Lambda</h1><p>Lambda is the ultimate abstraction layer</p><p>Lambda scales out ( not up ) automatically</p><h1 id="alexa">Alexa</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lambda&quot;&gt;Lambda&lt;/h1&gt;
&lt;p&gt;Lambda is the ultimate abstraction layer&lt;/p&gt;
&lt;p&gt;Lambda scales out ( not up ) automatically&lt;/p&gt;
&lt;h1 id=&quot;alexa&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/VPC</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/VPC/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/VPC/</id>
    <published>2019-12-21T11:06:29.993Z</published>
    <updated>2019-12-21T12:03:47.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vpc">VPC</h1><p>5~10 question</p><h2 id="what-can-we-do-with-a-vpc">What can we do with a VPC?</h2><ul><li>Launch instance into a subnet of your choosing</li><li>Assign custom IP address ranges in each subnet</li><li>Configure route tables between subnets</li><li>Create internet gateway and attach in to our VPC</li><li>Much better security control over your AWS resources</li><li>Instance security groups</li><li>Subnet network access control lists(ACLS)</li></ul><h2 id="vpc-peering">VPC Peering</h2><ul><li>Allows you to connect on VPC with another via a direct network route using private IP address</li><li>Instance behave as if they other AWS accounts as well as with other</li><li>You can peer VPC’s with other AWS accounts as well as with other VPCs in the same account</li><li>Peering is in a star configuration: ie 1central VPC peers with 4 others</li><li>You can peer between regions.</li></ul><h2 id="nat-gatway">NAT Gatway</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vpc&quot;&gt;VPC&lt;/h1&gt;
&lt;p&gt;5~10 question&lt;/p&gt;
&lt;h2 id=&quot;what-can-we-do-with-a-vpc&quot;&gt;What can we do with a VPC?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Launch instance into 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS/Route53</title>
    <link href="https://gurioh.github.io/guriOH.github.io/AWS/Route53/"/>
    <id>https://gurioh.github.io/guriOH.github.io/AWS/Route53/</id>
    <published>2019-12-21T09:52:30.163Z</published>
    <updated>2019-12-21T09:52:30.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dns-101">DNS 101</h1><h2 id="route-53">Route 53</h2><h3 id="register-a-domain-name-lab">Register A Domain Name - LAB</h3><h2 id="routing-policy">Routing policy</h2><p>One recode - mule IP address</p><h2 id="weighted-routing-policy">Weighted Routing Policy</h2><p>health checks</p><h2 id="latency-based-routing">Latency-Based Routing</h2><h2 id="failover-routing-policy">Failover Routing policy</h2><h2 id="geolocation-routing-policy">Geolocation Routing policy</h2><h2 id="geoproximity-routing-traffic-flow-only">Geoproximity Routing(Traffic Flow Only)</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dns-101&quot;&gt;DNS 101&lt;/h1&gt;
&lt;h2 id=&quot;route-53&quot;&gt;Route 53&lt;/h2&gt;
&lt;h3 id=&quot;register-a-domain-name-lab&quot;&gt;Register A Domain Name - LAB&lt;/h3&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>home</title>
    <link href="https://gurioh.github.io/guriOH.github.io/home/"/>
    <id>https://gurioh.github.io/guriOH.github.io/home/</id>
    <published>2019-12-20T08:57:11.075Z</published>
    <updated>2019-12-20T08:57:14.545Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="AWS_Study.md">Home</a></li><li>Toy-project<ul><li><a href="/guriOH.github.io/Project/Backup-program">마이그레이션</a></li></ul></li><li>Category<ul><li>Linux<ul><li><a href="/guriOH.github.io/Shell/shellscript">Shell</a></li></ul></li><li>AWS</li><li>BigData<ul><li>Kafka<ul><li><a href="/guriOH.github.io/Kafka/What_is_kafka">Kafka(카프카)</a></li><li><a href="/guriOH.github.io/Kafka/How_to_build_kafka_source_intellij">Kafka(카프카) 실행</a></li><li><a href="/guriOH.github.io/Kafka/How_to_build_kafka_with_intellij">Kafka(카프카) 인텔리제이 빌드 디버깅환경 구성</a></li></ul></li></ul></li><li>hexo<ul><li><a href="/guriOH.github.io/hexo/hexo-command">명령어</a></li></ul></li><li>Database<ul><li>Mysql<ul><li><a href="/guriOH.github.io/Database/Mysql/sql_tunning">SQL 튜닝</a></li></ul></li></ul></li><li>Spring<ul><li>Security<ul><li><a href="/guriOH.github.io/Spring/JWT_authenticate_process">JWT 토큰</a></li></ul></li></ul></li></ul></li></ul><!-- * Test  * [hexo-unit-test](https://github.com/hexojs/hexo-theme-unit-test)    * [Categories](/hexo-theme-book-demo/test/hexo-unit-test/categories)    * [Elements](/hexo-theme-book-demo/test/hexo-unit-test/elements)    * [Excerpts](/hexo-theme-book-demo/test/hexo-unit-test/excerpts)    * [Gallery Post](/hexo-theme-book-demo/test/hexo-unit-test/gallery-post)    * [Hello World](/hexo-theme-book-demo/test/hexo-unit-test/hello-world)    * [Images](/hexo-theme-book-demo/test/hexo-unit-test/images)    * [Untitled](/hexo-theme-book-demo/test/hexo-unit-test/link-post-without-title)    * [Link Post](/hexo-theme-book-demo/test/hexo-unit-test/link-post)    * [Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam justo turpis, tincidunt ac convallis id.](/hexo-theme-book-demo/test/hexo-unit-test/long-title)    * [Untitled](/hexo-theme-book-demo/test/hexo-unit-test/no-title)    * [Tag Plugins](/hexo-theme-book-demo/test/hexo-unit-test/tag-plugins)    * [Tags](/hexo-theme-book-demo/test/hexo-unit-test/tags)    * [Videos](/hexo-theme-book-demo/test/hexo-unit-test/videos)    * [中文測試](/hexo-theme-book-demo/test/hexo-unit-test/中文測試)    * [日本語テスト](/hexo-theme-book-demo/test/hexo-unit-test/日本語テスト)  * [list test](/hexo-theme-book-demo/test/list-test) --><!-- * Demo  * [markdown-it demo](/hexo-theme-book-demo/demo/markdown-it-demo)  * [katex demo](/hexo-theme-book-demo/demo/katex-demo)  * [footnotes demo](/hexo-theme-book-demo/demo/footnotes-demo)  * [繁體中文測試](/hexo-theme-book-demo/demo/tc-demo)  * [简体中文测试](/hexo-theme-book-demo/demo/sc-demo) -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;AWS_Study.md&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Toy-project
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/guriOH.github.io/Project/Backup-program&quot;&gt;마이그레이션&lt;/a&gt;&lt;/li&gt;
&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CI/CD</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Opensource/Trend/CI_CD_kubernetes/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Opensource/Trend/CI_CD_kubernetes/</id>
    <published>2019-12-19T04:09:23.000Z</published>
    <updated>2019-12-20T08:38:36.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ci-ci">CI/CI</h1><p>![image-20191219143935282](/Users/hoonoh/Library/Application Support/typora-user-images/image-20191219143935282.png)</p><h2 id="지속적-통합">지속적 통합</h2><p><a href="https://www.redhat.com/ko/solutions/cloud-native-development" target="_blank" rel="noopener">현대적인 애플리케이션 개발</a>에서는 여러 개발자들이 동일한 애플리케이션의 각기 다른 기능을 동시에 작업할 수 있도록 하는 것을 목표로 합니다. 그러나 조직에서 특정한 날(“<a href="https://thedailywtf.com/articles/Happy_Merge_Day!" target="_blank" rel="noopener">병합의 날(merge day)</a>”)을 정해 모든 분기 소스 코드를 병합하는 경우, 결과적으로 반복적인 수작업에 많은 시간을 소모하게 됩니다. 이렇게 반복적인 수작업을 하는 이유는 독립적으로 작업하는 개발자가 애플리케이션에 변경 사항을 적용할 때 다른 개발자가 동시에 적용하는 변경 사항과 충돌할 가능성이 있기 때문입니다. 이는 팀이 하나의 클라우드 기반 <a href="https://www.redhat.com/ko/topics/middleware/what-is-ide" target="_blank" rel="noopener">통합 개발 환경(Integrated Development Environment, IDE)</a> 사용에 동의하는 대신 각 개발자가 각자의 로컬 IDE를 커스터마이징하는 경우 더욱 복합적인 문제가 될 수 있습니다.</p><p>CI(지속적 통합)를 통해 개발자들은 코드 변경 사항을 공유 브랜치 또는 &quot;트렁크&quot;로 다시 병합하는 작업을 더욱 수월하게 자주 수행할 수 있습니다. 개발자가 애플리케이션에 적용한 변경 사항이 병합되면 이러한 변경 사항이 애플리케이션을 손상시키지 않도록 자동으로 애플리케이션을 구축하고 각기 다른 레벨의 자동화 테스트(일반적으로 단위 테스트 및 통합 테스트) 실행을 통해 변경 사항이 애플리케이션에 제대로 적용되었는지를 확인합니다. 다시 말해, 클래스와 기능에서부터 전체 애플리케이션을 구성하는 서로 다른 모듈에 이르기까지 모든 것에 대한 테스트를 수행합니다. 자동화된 테스트에서 기존 코드와 신규 코드 간의 충돌이 발견되면 CI를 통해 이러한 버그를 더욱 빠르게 자주 수정할 수 있습니다.</p><p><a href="https://developers.redhat.com/blog/2017/09/06/continuous-integration-a-typical-process/" target="_blank" rel="noopener">기술적인 내용에 대해 자세히 알아보기</a></p><hr><h2 id="지속적-제공">지속적 제공</h2><p>CI의 빌드 자동화, 유닛 및 통합 테스트 수행 후, 이어지는 지속적 제공 프로세스에서는 유효한 코드를 리포지토리에 자동으로 릴리스합니다. 그러므로 효과적인 지속적 제공 프로세스를 실현하기 위해서는 개발 파이프라인에 CI가 먼저 구축되어 있어야 합니다. 지속적 제공의 목표는 프로덕션 환경으로 배포할 준비가 되어 있는 코드베이스를 확보하는 것입니다.</p><p>지속적 제공의 경우, 코드 변경 사항 병합부터 프로덕션에 적합한 빌드 제공에 이르는 모든 단계에는 테스트 자동화와 코드 릴리스 자동화가 포함됩니다. 이 프로세스를 완료하면 운영팀이 보다 빠르고 손쉽게 애플리케이션을 프로덕션으로 배포할 수 있게 됩니다.</p><hr><h2 id="지속적-배포">지속적 배포</h2><p>CI/CD 파이프라인의 마지막 단계는 지속적 배포입니다. 프로덕션 준비가 완료된 빌드를 코드 리포지토리에 자동으로 릴리스하는 지속적 제공의 확장된 형태인 지속적 배포는 애플리케이션을 프로덕션으로 릴리스하는 작업을 자동화합니다. 프로덕션 이전의 파이프라인 단계에는 수동 작업 과정이 없으므로, 지속적 배포가 제대로 이루어지려면 테스트 자동화가 제대로 설계되어 있어야 합니다.</p><p>실제 사례에서 지속적 배포란 개발자가 애플리케이션에 변경 사항을 작성한 후 몇 분 이내에 애플리케이션을 자동으로 실행할 수 있는 것을 의미합니다(자동화된 테스트를 통과한 것으로 간주). 이를 통해 사용자 피드백을 지속적으로 수신하고 통합하는 일이 훨씬 수월해집니다. 이러한 모든 CI/CD 적용 사례는 애플리케이션 배포의 위험성을 줄여주므로 애플리케이션 변경 사항을 한 번에 모두 릴리스하지 않고 작은 조각으로 세분화하여 더욱 손쉽게 릴리스할 수 있습니다. 그러나 자동화된 테스트는 CI/CD 파이프라인의 여러 테스트 및 릴리스 단계를 수행할 수 있어야 하기 때문에 많은 선행 투자가 필요합니다.</p><p>Ref. <a href="https://www.redhat.com/ko/topics/devops/what-is-ci-cd" target="_blank" rel="noopener">https://www.redhat.com/ko/topics/devops/what-is-ci-cd</a></p><h1 id="kubernetes">Kubernetes</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ci-ci&quot;&gt;CI/CI&lt;/h1&gt;
&lt;p&gt;![image-20191219143935282](/Users/hoonoh/Library/Application Support/typora-user-images/image-20191219143935282
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Agile/스케일드 애자일 프레임워크</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Agile/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%20%E1%84%8B%E1%85%A2%E1%84%8C%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%AF%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%8B%E1%85%AF%E1%84%8F%E1%85%B3/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Agile/스케일드 애자일 프레임워크/</id>
    <published>2019-12-19T02:19:13.468Z</published>
    <updated>2019-12-20T08:38:38.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pi">PI</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pi&quot;&gt;PI&lt;/h1&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020_opensource_trend</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Opensource/Trend/2020-opensource-trend/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Opensource/Trend/2020-opensource-trend/</id>
    <published>2019-12-19T01:22:53.000Z</published>
    <updated>2019-12-20T08:38:39.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="가트너-2020-트렌드">가트너 2020 트렌드</h1><h2 id="자율-자동화">자율, 자동화</h2><h2 id="2019-트렌드">2019 트렌드</h2><ul><li>서버리스 아키텍처</li><li>컨테이너 오케스트레이션</li><li>챗봇, 블록체인 , AI</li><li>메타클라우드, 데브옵스</li></ul><h3 id="비지니스">비지니스</h3><ul><li>챗봇, 블록체인 , AI</li></ul><h3 id="기술">기술</h3><ul><li>서버리스아키텍처, 컨테이너 오케스트레이션</li></ul><h3 id="중간-연결">중간 연결</h3><ul><li>메타클라우드, 데브옵스</li></ul><p>===================</p><p>트랜드 -&gt; 펑셔널하게 간다.</p><p>관련 트렌드 서버리스, Fass 등등</p><h2 id="클라우드">클라우드</h2><p>트랜드 -&gt; 멀티클라우드 ?</p><h3 id="클라우드-네이티브">클라우드 네이티브</h3><h3 id="scale-cube">Scale Cube</h3><p>Y축 확장 : Functional - 시스템 분산 기능별 분산</p><p>X축 확장 : 처리기 자체 확장</p><p>Z축 확장 : 데이터 파티셔닝</p><p>------&gt; MSA 서비스</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;가트너-2020-트렌드&quot;&gt;가트너 2020 트렌드&lt;/h1&gt;
&lt;h2 id=&quot;자율-자동화&quot;&gt;자율, 자동화&lt;/h2&gt;
&lt;h2 id=&quot;2019-트렌드&quot;&gt;2019 트렌드&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;서버리스 아키텍처&lt;/li&gt;
&lt;li&gt;컨테이너 오케스트레이
      
    
    </summary>
    
    
    
      <category term="opensource" scheme="https://gurioh.github.io/guriOH.github.io/tags/opensource/"/>
    
  </entry>
  
  <entry>
    <title>build location</title>
    <link href="https://gurioh.github.io/guriOH.github.io/build%20location/"/>
    <id>https://gurioh.github.io/guriOH.github.io/build location/</id>
    <published>2019-12-17T11:54:24.555Z</published>
    <updated>2019-12-17T11:54:24.555Z</updated>
    
    <content type="html"><![CDATA[<p>sudo ls -al /root/.jenkins/workspace/중랑구_스마트시티/iot-api/build/asciidoc/html5/admin</p><p>sudo ls -al /root/.jenkins/workspace/중랑구_스마트시티/iot-api/build/libs/</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sudo ls -al /root/.jenkins/workspace/중랑구_스마트시티/iot-api/build/asciidoc/html5/admin&lt;/p&gt;
&lt;p&gt;sudo ls -al /root/.jenkins/workspace/중랑구_스마트시티/i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring/JWT_authenticate_process</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Spring/JWT_authenticate_process/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Spring/JWT_authenticate_process/</id>
    <published>2019-12-16T04:33:21.743Z</published>
    <updated>2019-12-18T14:11:45.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-security">Spring Security</h1><h3 id="필요개념">필요개념</h3><ul><li>접근주체(Principal) : 접근 사용자</li><li>인증(Authenticate) : 접근 주체 확인</li><li>인가(Authorize) : 접근 주체의 권한 검사</li></ul><img src="/Users/hoonoh/Desktop/Summary_arc.jpg" alt="Summary_arc" style="zoom:50%;"/><p>스프링의 구조는 필터와 필터된 Authentication객체를 가지고 실질적인 Validation을 하는 Provider로 나뉜다.</p><h3 id="filter-chain">Filter chain</h3><p>스프링 시큐리티 역시 Filter가 구성이 되어있다.</p><p>기본적으로 11개의 Filter로 구성이 되어있고, Filter를 커스터마이징 하여 추가 확장 시킬수 있다.</p><p>이때 중요한것은 필터간의 순서가 중요하다.</p><h3 id="provider">Provider</h3><p>프로바이더는 실질적인 검증을 하는 클래스로 AuthenticationProvider를 구현하고</p><p>AuthenticationManagerBuilder에 커스터마이징하여 등록이 가능하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  auth.authenticationProvider(authenticationProvider);</span><br><span class="line">  auth.authenticationProvider(jwtAutenticationTokenProvider);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-security&quot;&gt;Spring Security&lt;/h1&gt;
&lt;h3 id=&quot;필요개념&quot;&gt;필요개념&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;접근주체(Principal) : 접근 사용자&lt;/li&gt;
&lt;li&gt;인증(Authenticate) : 접근 주체 확인
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Seminar/GCP_SEMINAR</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Seminar/GCP_SEMINAR/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Seminar/GCP_SEMINAR/</id>
    <published>2019-12-12T02:14:33.295Z</published>
    <updated>2019-12-18T14:15:46.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="google-cloud-seminar">Google Cloud seminar</h1><p>Google vs AWS</p><ul><li>가격모델<ul><li>더 합리적인듯 (할인(?))</li><li>자체 머신러닝으로 사용 리소스 분석 -&gt; 합리적인 스팩 추천</li></ul></li><li>커스텀 머신 타입<ul><li>GPU 등등</li></ul></li><li>네트워크<ul><li>A사의 경우 전통적인 모델 Each Region vpn set</li><li>하나의 VPC로 관리 -&gt; 모든 리전 접근 가능</li></ul></li></ul><h2 id="데이터베이스">데이터베이스</h2><ul><li>Nosql , cansandra</li></ul><p>bigtable  : 분산저장처리 시작된 이유 -&gt; 논문 한번 보자.</p><h2 id="보안">보안</h2><ul><li>Forrester</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;google-cloud-seminar&quot;&gt;Google Cloud seminar&lt;/h1&gt;
&lt;p&gt;Google vs AWS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가격모델
&lt;ul&gt;
&lt;li&gt;더 합리적인듯 (할인(?))&lt;/li&gt;
&lt;li&gt;자체 머신러닝으로 사용 리소
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>tip</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Linux/tip/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Linux/tip/</id>
    <published>2019-12-12T00:12:12.000Z</published>
    <updated>2019-12-18T14:13:43.550Z</updated>
    
    <content type="html"><![CDATA[<p>특정 포트를 사용하는 프로세스 검사</p><ul><li>lsof -i :[port]</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;특정 포트를 사용하는 프로세스 검사&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lsof -i :[port]&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>menu</title>
    <link href="https://gurioh.github.io/guriOH.github.io/menu/"/>
    <id>https://gurioh.github.io/guriOH.github.io/menu/</id>
    <published>2019-12-10T13:23:12.971Z</published>
    <updated>2019-12-21T13:10:03.657Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="AWS_Study.md">Home</a></li><li>Toy-project<ul><li><a href="/guriOH.github.io/Project/Backup-program">마이그레이션</a></li></ul></li><li>Category<ul><li>Linux<ul><li><a href="/guriOH.github.io/Shell/shellscript">Shell</a></li><li><a href="/guriOH.github.io/Shell/Configuration_env_with_intellij">스크립트 개발환경 만들기</a></li></ul></li><li>AWS</li><li>BigData<ul><li>Kafka<ul><li><a href="/guriOH.github.io/Kafka/What_is_kafka">Kafka(카프카)</a></li><li><a href="/guriOH.github.io/Kafka/How_to_build_kafka_source_intellij">Kafka(카프카) 실행</a></li><li><a href="/guriOH.github.io/Kafka/How_to_build_kafka_with_intellij">Kafka(카프카) 인텔리제이 빌드 디버깅환경 구성</a></li></ul></li></ul></li><li>hexo<ul><li><a href="/guriOH.github.io/hexo/hexo-command">명령어</a></li></ul></li><li>Database<ul><li>Mysql<ul><li><a href="/guriOH.github.io/Database/Mysql/sql_tunning">SQL 튜닝</a></li></ul></li></ul></li><li>Spring<ul><li>Security<ul><li><a href="/guriOH.github.io/Spring/JWT_authenticate_process">JWT 토큰</a></li></ul></li></ul></li></ul></li></ul><!-- * Test  * [hexo-unit-test](https://github.com/hexojs/hexo-theme-unit-test)    * [Categories](/hexo-theme-book-demo/test/hexo-unit-test/categories)    * [Elements](/hexo-theme-book-demo/test/hexo-unit-test/elements)    * [Excerpts](/hexo-theme-book-demo/test/hexo-unit-test/excerpts)    * [Gallery Post](/hexo-theme-book-demo/test/hexo-unit-test/gallery-post)    * [Hello World](/hexo-theme-book-demo/test/hexo-unit-test/hello-world)    * [Images](/hexo-theme-book-demo/test/hexo-unit-test/images)    * [Untitled](/hexo-theme-book-demo/test/hexo-unit-test/link-post-without-title)    * [Link Post](/hexo-theme-book-demo/test/hexo-unit-test/link-post)    * [Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam justo turpis, tincidunt ac convallis id.](/hexo-theme-book-demo/test/hexo-unit-test/long-title)    * [Untitled](/hexo-theme-book-demo/test/hexo-unit-test/no-title)    * [Tag Plugins](/hexo-theme-book-demo/test/hexo-unit-test/tag-plugins)    * [Tags](/hexo-theme-book-demo/test/hexo-unit-test/tags)    * [Videos](/hexo-theme-book-demo/test/hexo-unit-test/videos)    * [中文測試](/hexo-theme-book-demo/test/hexo-unit-test/中文測試)    * [日本語テスト](/hexo-theme-book-demo/test/hexo-unit-test/日本語テスト)  * [list test](/hexo-theme-book-demo/test/list-test) --><!-- * Demo  * [markdown-it demo](/hexo-theme-book-demo/demo/markdown-it-demo)  * [katex demo](/hexo-theme-book-demo/demo/katex-demo)  * [footnotes demo](/hexo-theme-book-demo/demo/footnotes-demo)  * [繁體中文測試](/hexo-theme-book-demo/demo/tc-demo)  * [简体中文测试](/hexo-theme-book-demo/demo/sc-demo) -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;AWS_Study.md&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Toy-project
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/guriOH.github.io/Project/Backup-program&quot;&gt;마이그레이션&lt;/a&gt;&lt;/li&gt;
&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sql_20191208</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Database/Mysql/sql-20191208/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Database/Mysql/sql-20191208/</id>
    <published>2019-12-09T08:13:29.000Z</published>
    <updated>2019-12-18T14:15:30.297Z</updated>
    
    <content type="html"><![CDATA[<p>AUTO_INCREMENT 초기화</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &apos;테이블이름&apos; AUTO_INCREMENT = 1;</span><br></pre></td></tr></table></figure><p>캐리지 리턴 제거 (개행제거)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE &apos;테이블이름&apos; SET &apos;컬럼명&apos; = replace(&apos;컬럼명&apos;, char(13), &apos;&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AUTO_INCREMENT 초기화&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sql_20191208</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Database/Mysql/sql_tunning/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Database/Mysql/sql_tunning/</id>
    <published>2019-12-09T08:13:29.000Z</published>
    <updated>2019-12-18T14:15:39.431Z</updated>
    
    <content type="html"><![CDATA[<p>SQL 튜닝</p><p>튜닝 기초</p><ul><li>성능 높일시 비중이 높은부분을 높이는것이 중요</li></ul><h1 id="explain-사용">EXPLAIN 사용</h1><ul><li>EXPLAIN을 사용하여 쿼리 플랜 분석<br>![스크린샷 2019-12-05 오전 11.13.11](‎⁨Macintosh HD⁩ ▸ ⁨사용자⁩ ▸ ⁨hoonoh⁩ ▸ ⁨데스크탑⁩/스크린샷 2019-12-05 오전 11.13.11.png)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SQL 튜닝&lt;/p&gt;
&lt;p&gt;튜닝 기초&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;성능 높일시 비중이 높은부분을 높이는것이 중요&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;explain-사용&quot;&gt;EXPLAIN 사용&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;EXPLAIN을 사용하여 쿼리 플랜 분석
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://gurioh.github.io/guriOH.github.io/test/"/>
    <id>https://gurioh.github.io/guriOH.github.io/test/</id>
    <published>2019-12-08T13:33:15.000Z</published>
    <updated>2019-12-08T13:33:15.267Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://gurioh.github.io/guriOH.github.io/test/test/"/>
    <id>https://gurioh.github.io/guriOH.github.io/test/test/</id>
    <published>2019-12-08T13:33:15.000Z</published>
    <updated>2019-12-17T15:31:55.438Z</updated>
    
    <content type="html"><![CDATA[<p>asdasd</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;asdasd&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring_20191205</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Spring/Spring-20191205/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Spring/Spring-20191205/</id>
    <published>2019-12-06T01:05:25.000Z</published>
    <updated>2019-12-18T14:13:00.309Z</updated>
    
    <content type="html"><![CDATA[<p>스프링 제어<br>WebMvcConfigurer</p><ul><li>포멧, 메시지 컨버트 관련하여 스프링 MVC를 제어 한다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;스프링 제어&lt;br&gt;
WebMvcConfigurer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;포멧, 메시지 컨버트 관련하여 스프링 MVC를 제어 한다.&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Git/git/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Git/git/</id>
    <published>2019-12-05T12:55:49.000Z</published>
    <updated>2019-12-18T14:12:42.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-ignore-리모트-적용방법">Git ignore 리모트 적용방법</h1><blockquote><p>git rm -r --cached .<br>git add .<br>git commit -m “Apply .gitignore”</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-ignore-리모트-적용방법&quot;&gt;Git ignore 리모트 적용방법&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;git rm -r --cached .&lt;br&gt;
git add .&lt;br&gt;
git commit -m “Apply .gitignore
      
    
    </summary>
    
    
      <category term="git" scheme="https://gurioh.github.io/guriOH.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://gurioh.github.io/guriOH.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Shell/shellscript</title>
    <link href="https://gurioh.github.io/guriOH.github.io/Shell/shellscript/"/>
    <id>https://gurioh.github.io/guriOH.github.io/Shell/shellscript/</id>
    <published>2019-12-03T15:26:09.810Z</published>
    <updated>2019-12-18T14:12:09.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="쉘스크립트-문법-정리">쉘스크립트 문법 정리</h1><blockquote><p>쉘스크립트 첫라인 #!/bin/bash 의미?</p><ul><li><p>스크립트파일을 bash로 실행시킨다는 의미</p></li><li><p>기재하지 않으면 리눅스 배포판의 경우 디폴트가 bash이므로 무리 없이 작동하지만<br>다른 쉘간의 오류를 방지를 위함.</p></li></ul></blockquote><h2 id="기본-문법">기본 문법</h2><ul><li><code>echo</code>, <code>printf</code></li><li><code>$#</code> : 스크립트에 전달되는 인자들의 수(C언어에서 argc)</li><li><code>$0</code> : 실행하는 스크립트의 파일명으로 실행했을 때 경로를 포함한다면 경로를 포함해서 나옵니다.</li><li><code>$1</code>, <code>$2</code> … : 스크립트로 전달된 인자들(C언어에서 argv[0], argv[1]…)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Echo Test"</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"printf Test\n"</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"Name of script : %s\n"</span> <span class="variable">$0</span> </span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%d arguments %s %s\n"</span> <span class="variable">$#</span> <span class="variable">$1</span> <span class="variable">$2</span></span><br></pre></td></tr></table></figure><h2 id="exit">exit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exit 100</span><br><span class="line"></span><br><span class="line"># 스크립트 종료후 echo $? 로 확인.</span><br><span class="line"># 관습적으로 &apos;exit 0&apos;은 성공을 의미합니다.</span><br><span class="line"># 0이 아닌 값은 에러나 예외상황을 나타냅니다.</span><br></pre></td></tr></table></figure><p><code>$?</code>는 스크립트에서 실행시키 명령어의 결과를 확인하는데 특별히 유용</p><h2 id="특수문자">특수문자</h2><p><code>#</code> : 주석</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 주석 뒤에는 명령어가 올수 없다.</span><br><span class="line">\# 이스케이프된 #은 주석을 나타내지 않는다.</span><br></pre></td></tr></table></figure><p><code>;</code> : 명령어 구분자, 두개 이상의 명령어를 한 줄에서 같이 사용할 수 있다.</p><p><code>부분쿼우팅</code>[이중쿼우트]  “content” <strong>문자열</strong> 대부분 특수문자 해석을 막는다.</p><p><code>완전쿼우팅</code>[단일쿼우트]  ‘content’  <strong>문자열</strong>에 들어 있는 모든 특수 문자를 해석하지 못하도록 막아줍니다</p><p><code>명령어치환</code>[백틱(backticks)] ``명령어` 라고 하면 명령어의 결과를 변수값으로 설정할 수있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;쉘스크립트-문법-정리&quot;&gt;쉘스크립트 문법 정리&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;쉘스크립트 첫라인 #!/bin/bash 의미?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스크립트파일을 bash로 실행시킨다는 의미&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
